import numpy as np

from statsmodels.tools.testing import ParamsTableTestBunch

est = dict(
    deviance=18.59164098607571,
    dispers=1.859164098607571,
    deviance_s=18.59164098607571,
    dispers_s=1.859164098607571,
    deviance_p=24.75374834715614,
    dispers_p=2.475374834715614,
    deviance_ps=24.75374834715614,
    dispers_ps=2.475374834715614,
    bic=-9.740492454486454,
    nbml=0,
    N=17,
    ic=3,
    k=7,
    k_eq=1,
    k_dv=1,
    converged=1,
    k_autoCns=0,
    ll=-31.92732830809848,
    chi2=128.8021169250575,
    p=2.29729497374e-25,
    rc=0,
    aic=4.579685683305704,
    rank=7,
    canonical=1,
    power=0,
    df_m=6,
    df=10,
    vf=1,
    phi=1,
    k_eq_model=0,
    properties="b V",
    depvar="executions",
    which="max",
    technique="nr",
    singularHmethod="m-marquardt",
    ml_method="e2",
    crittype="log likelihood",
    user="glim_lf",
    title="Generalized linear models",
    opt="moptimize",
    chi2type="Wald",
    link="glim_l03",
    varfunc="glim_v3",
    m="1",
    a="1",
    oim="oim",
    opt1="ML",
    varfuncf="u",
    varfunct="Poisson",
    linkf="ln(u)",
    linkt="Log",
    vce="oim",
    vcetype="OIM",
    hac_lag="15",
    marginsok="default",
    marginsnotok="stdp Anscombe Cooksd Deviance Hat Likelihood Pearson Response Score Working ADJusted STAndardized STUdentized MODified",  # noqa:E501
    predict="glim_p",
    cmd="glm",
    cmdline="glm executions income perpoverty perblack LN_VC100k96 south degree, family(poisson)",  # noqa:E501
)

params_table = np.array(
    [
        0.00026110166569,
        0.00005187148786,
        5.0336259178483,
        4.812884279e-07,
        0.00015943541766,
        0.00036276791372,
        np.nan,
        1.9599639845401,
        0,
        0.07781804809828,
        0.07940260798777,
        0.98004398180811,
        0.32706440886796,
        -0.0778082038363,
        0.23344430003287,
        np.nan,
        1.9599639845401,
        0,
        -0.09493110013466,
        0.02291930335216,
        -4.1419714498302,
        0.00003443332141,
        -0.13985210925565,
        -0.05001009101367,
        np.nan,
        1.9599639845401,
        0,
        0.29693462055586,
        0.43751760764129,
        0.67868038993144,
        0.49734039404176,
        -0.5605841330232,
        1.1544533741349,
        np.nan,
        1.9599639845401,
        0,
        2.3011832004524,
        0.42838381728481,
        5.3717790159251,
        7.796361708e-08,
        1.4615663470144,
        3.1408000538904,
        np.nan,
        1.9599639845401,
        0,
        -18.722067603077,
        4.2839791307242,
        -4.3702518223781,
        0.00001241033322,
        -27.118512409818,
        -10.325622796337,
        np.nan,
        1.9599639845401,
        0,
        -6.8014789919532,
        4.146873025502,
        -1.6401464308471,
        0.10097472438129,
        -14.929200770398,
        1.3262427864914,
        np.nan,
        1.9599639845401,
        0,
    ]
).reshape(7, 9)

params_table_colnames = "b se z pvalue ll ul df crit eform".split()

params_table_rownames = [
    "income",
    "perpoverty",
    "perblack",
    "LN_VC100k96",
    "south",
    "degree",
    "_cons",
]

cov = np.array(
    [
        2.690651253e-09,
        1.942168909e-06,
        9.445812833e-08,
        4.703695025e-06,
        -6.082922480e-06,
        -0.00008108248895,
        -0.00013492774575,
        1.942168909e-06,
        0.00630477415526,
        0.00017467012687,
        0.00328093520848,
        -0.01768604570302,
        0.11117887243846,
        -0.19441636422025,
        9.445812833e-08,
        0.00017467012687,
        0.00052529446615,
        -0.00313545508833,
        -0.00516707569472,
        -0.03253594627601,
        0.01688876616272,
        4.703695025e-06,
        0.00328093520848,
        -0.00313545508833,
        0.19142165699616,
        -0.00179497953339,
        0.30391667530759,
        -1.4489146451821,
        -6.082922480e-06,
        -0.01768604570302,
        -0.00516707569472,
        -0.00179497953339,
        0.18351269491151,
        0.3016848477378,
        0.36484063612427,
        -0.00008108248895,
        0.11117887243846,
        -0.03253594627601,
        0.30391667530759,
        0.3016848477378,
        18.352477192481,
        -4.0741043266703,
        -0.00013492774575,
        -0.19441636422025,
        0.01688876616272,
        -1.4489146451821,
        0.36484063612427,
        -4.0741043266703,
        17.196555889636,
    ]
).reshape(7, 7)

cov_colnames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

cov_rownames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

infocrit = np.array([17, np.nan, -31.927328308098, 7, 77.854656616197, 83.68715002459])

infocrit_colnames = "N ll0 ll df AIC BIC".split()

infocrit_rownames = ".".split()

predicted = np.array(
    [
        35.226364135742,
        0.16681243479252,
        0.98022246360779,
        8.1965742111206,
        0.33106967806816,
        0.89840310811996,
        1.3118965625763,
        0.29945519566536,
        0.11764223873615,
        3.6862981319427,
        0.35516858100891,
        0.46500706672668,
        2.0823004245758,
        0.3434439599514,
        0.24561515450478,
        1.0650315284729,
        0.62310123443604,
        0.41350400447845,
        1.9260421991348,
        0.40797635912895,
        0.32057955861092,
        2.4171404838562,
        0.36215576529503,
        0.31702440977097,
        1.8473218679428,
        0.3869916498661,
        0.27665960788727,
        2.8643238544464,
        0.43869277834892,
        0.55124300718307,
        3.1211984157562,
        0.44224792718887,
        0.61045408248901,
        3.338207244873,
        0.42789322137833,
        0.61120104789734,
        2.5269968509674,
        0.42458593845367,
        0.45554983615875,
        0.89725440740585,
        0.59187793731689,
        0.31432569026947,
        0.97933322191238,
        0.37813624739647,
        0.14003194868565,
        0.53462094068527,
        0.38791963458061,
        0.08045063912868,
        1.9790935516357,
        0.31954729557037,
        0.20208616554737,
    ]
).reshape(17, 3)

predicted_colnames = "predict_mu predict_linpred_std predict_hat".split()

predicted_rownames = ["r" + str(n) for n in range(1, 18)]

resids = np.array(
    [
        1.773634314537,
        1.773634314537,
        0.29638093709946,
        0.29637759923935,
        0.2988341152668,
        0.05034962296486,
        0.80342543125153,
        0.80342543125153,
        0.27623143792152,
        0.27622014284134,
        0.28062695264816,
        0.09801965206861,
        4.6881031990051,
        4.6881031990051,
        3.0157172679901,
        2.977787733078,
        4.0930528640747,
        3.5735311508179,
        0.31370183825493,
        0.31370183825493,
        0.1611547768116,
        0.16114975512028,
        0.16338862478733,
        0.08509942144156,
        0.91769951581955,
        0.91769951581955,
        0.59656941890717,
        0.59618371725082,
        0.63595855236053,
        0.44071426987648,
        0.9349684715271,
        0.9349684715271,
        0.80822360515594,
        0.80661898851395,
        0.90597397089005,
        0.87787866592407,
        0.07395775616169,
        0.07395775616169,
        0.05295527353883,
        0.05295492336154,
        0.05329062789679,
        0.03839882463217,
        -0.41714036464691,
        -0.41714036464691,
        -0.27668312191963,
        -0.27663832902908,
        -0.2683065533638,
        -0.17257598042488,
        -0.84732186794281,
        -0.84732186794281,
        -0.68459099531174,
        -0.68349820375443,
        -0.6234148144722,
        -0.458675801754,
        -1.8643238544464,
        -1.8643238544464,
        -1.2799508571625,
        -1.274356007576,
        -1.1015654802322,
        -0.65087747573853,
        -2.1211984157562,
        -2.1211984157562,
        -1.4092296361923,
        -1.4021278619766,
        -1.2006615400314,
        -0.67961025238037,
        -2.338207244873,
        -2.338207244873,
        -1.5136297941208,
        -1.5051733255386,
        -1.2797535657883,
        -0.70043802261353,
        -1.5269968509674,
        -1.5269968509674,
        -1.0992211103439,
        -1.0954134464264,
        -0.9605849981308,
        -0.60427337884903,
        0.10274560004473,
        0.10274560004473,
        0.10649761557579,
        0.1064917370677,
        0.10846894979477,
        0.11451110988855,
        0.02066676132381,
        0.02066676132381,
        0.02081091701984,
        0.02081087417901,
        0.02088368684053,
        0.02110289037228,
        0.46537905931473,
        0.46537905931473,
        0.56824368238449,
        0.56713002920151,
        0.63647866249084,
        0.87048417329788,
        -0.97909361124039,
        -0.97909361124039,
        -0.77151334285736,
        -0.77000600099564,
        -0.69597083330154,
        -0.49471819400787,
    ]
).reshape(17, 6)

resids_colnames = [
    "score_factor",
    "resid_response",
    "resid_anscombe",
    "resid_deviance",
    "resid_pearson",
    "resid_working",
]

resids_rownames = ["r" + str(n) for n in range(1, 18)]


results_poisson_none_nonrobust = ParamsTableTestBunch(
    params_table=params_table,
    params_table_colnames=params_table_colnames,
    params_table_rownames=params_table_rownames,
    cov=cov,
    cov_colnames=cov_colnames,
    cov_rownames=cov_rownames,
    infocrit=infocrit,
    infocrit_colnames=infocrit_colnames,
    infocrit_rownames=infocrit_rownames,
    predicted=predicted,
    predicted_colnames=predicted_colnames,
    predicted_rownames=predicted_rownames,
    resids=resids,
    resids_colnames=resids_colnames,
    resids_rownames=resids_rownames,
    **est,
)

est = dict(
    deviance=23.34969514421719,
    dispers=0.8980651978545075,
    deviance_s=23.34969514421719,
    dispers_s=0.8980651978545075,
    deviance_p=30.06164170990202,
    dispers_p=1.156216988842385,
    deviance_ps=30.06164170990202,
    dispers_ps=1.156216988842385,
    bic=-67.5595014539113,
    nbml=0,
    N=33,
    ic=3,
    k=7,
    k_eq=1,
    k_dv=1,
    converged=1,
    k_autoCns=0,
    ll=-52.96941847346162,
    chi2=183.6836771894393,
    p=5.59891844113e-37,
    rc=0,
    aic=3.634510210512826,
    rank=7,
    canonical=1,
    power=0,
    df_m=6,
    df=26,
    vf=1,
    phi=1,
    k_eq_model=0,
    properties="b V",
    depvar="executions",
    which="max",
    technique="nr",
    singularHmethod="m-marquardt",
    ml_method="e2",
    crittype="log likelihood",
    user="glim_lf",
    title="Generalized linear models",
    opt="moptimize",
    chi2type="Wald",
    wtype="fweight",
    wexp="= fweight",
    link="glim_l03",
    varfunc="glim_v3",
    m="1",
    a="1",
    oim="oim",
    opt1="ML",
    varfuncf="u",
    varfunct="Poisson",
    linkf="ln(u)",
    linkt="Log",
    vce="oim",
    vcetype="OIM",
    hac_lag="15",
    marginsok="default",
    marginsnotok="stdp Anscombe Cooksd Deviance Hat Likelihood Pearson Response Score Working ADJusted STAndardized STUdentized MODified",  # noqa:E501
    predict="glim_p",
    cmd="glm",
    cmdline="glm executions income perpoverty perblack LN_VC100k96 south degree [fweight=fweight], family(poisson)",  # noqa:E501
)

params_table = np.array(
    [
        0.00025343868829,
        0.00004015414514,
        6.3116444744157,
        2.760858933e-10,
        0.00017473800999,
        0.00033213936659,
        np.nan,
        1.9599639845401,
        0,
        0.09081422305585,
        0.06472607217881,
        1.4030547505642,
        0.16060051303473,
        -0.03604654727537,
        0.21767499338706,
        np.nan,
        1.9599639845401,
        0,
        -0.09416451429381,
        0.01795769655821,
        -5.2436855689475,
        1.574003474e-07,
        -0.12936095279319,
        -0.05896807579442,
        np.nan,
        1.9599639845401,
        0,
        0.27652273809506,
        0.38626128010796,
        0.7158955669017,
        0.47405583598111,
        -0.48053545953887,
        1.033580935729,
        np.nan,
        1.9599639845401,
        0,
        2.239890838384,
        0.36339399714255,
        6.1638080320445,
        7.101602988e-10,
        1.5276516917866,
        2.9521299849815,
        np.nan,
        1.9599639845401,
        0,
        -18.842583191417,
        3.736940161486,
        -5.0422491067996,
        4.600917913e-07,
        -26.16685132031,
        -11.518315062523,
        np.nan,
        1.9599639845401,
        0,
        -6.5630017977416,
        3.2352486362722,
        -2.0285927097411,
        0.04249979172538,
        -12.903972605867,
        -0.22203098961573,
        np.nan,
        1.9599639845401,
        0,
    ]
).reshape(7, 9)

params_table_colnames = "b se z pvalue ll ul df crit eform".split()

params_table_rownames = [
    "income",
    "perpoverty",
    "perblack",
    "LN_VC100k96",
    "south",
    "degree",
    "_cons",
]

cov = np.array(
    [
        1.612355372e-09,
        1.270985149e-06,
        8.789752394e-08,
        -1.636449642e-07,
        -3.213686689e-06,
        -0.00005643188411,
        -0.00006199883309,
        1.270985149e-06,
        0.0041894644197,
        0.00016567874308,
        -0.00066453618021,
        -0.00943379587945,
        0.07218307550995,
        -0.11262571631082,
        8.789752394e-08,
        0.00016567874308,
        0.00032247886568,
        -0.00355795369216,
        -0.00391377556228,
        -0.01880905186772,
        0.01900717143416,
        -1.636449642e-07,
        -0.00066453618021,
        -0.00355795369216,
        0.14919777651064,
        0.02481983169552,
        0.26952997380446,
        -0.95915288407306,
        -3.213686689e-06,
        -0.00943379587945,
        -0.00391377556228,
        0.02481983169552,
        0.13205519715924,
        0.44364186152042,
        -0.0298149336078,
        -0.00005643188411,
        0.07218307550995,
        -0.01880905186772,
        0.26952997380446,
        0.44364186152042,
        13.964721770527,
        -3.6510403528048,
        -0.00006199883309,
        -0.11262571631082,
        0.01900717143416,
        -0.95915288407306,
        -0.0298149336078,
        -3.6510403528048,
        10.466833738501,
    ]
).reshape(7, 7)

cov_colnames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

cov_rownames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

infocrit = np.array([33, np.nan, -52.969418473462, 7, 119.93883694692, 130.41438987719])

infocrit_colnames = "N ll0 ll df AIC BIC".split()

infocrit_rownames = ".".split()

predicted = np.array(
    [
        34.815238952637,
        0.16658315062523,
        0.96612107753754,
        7.3026847839355,
        0.32757967710495,
        0.78363972902298,
        1.2540435791016,
        0.26076200604439,
        0.08527097851038,
        3.9734709262848,
        0.24942673742771,
        0.24720433354378,
        2.0739872455597,
        0.24682784080505,
        0.12635557353497,
        1.1471545696259,
        0.45427960157394,
        0.23673823475838,
        1.7763512134552,
        0.27608770132065,
        0.13540133833885,
        2.2698366641998,
        0.25641229748726,
        0.1492355465889,
        1.6349502801895,
        0.27634221315384,
        0.12485299259424,
        2.7504913806915,
        0.39550569653511,
        0.43024495244026,
        2.862185716629,
        0.39729079604149,
        0.45176732540131,
        3.5617923736572,
        0.39150056242943,
        0.54592549800873,
        2.6135795116425,
        0.29556328058243,
        0.22831618785858,
        0.775799036026,
        0.40655690431595,
        0.12823067605495,
        0.93375068902969,
        0.29390665888786,
        0.08065843582153,
        0.56681954860687,
        0.28863781690598,
        0.04722274839878,
        1.8914022445679,
        0.21889741718769,
        0.09062857925892,
    ]
).reshape(17, 3)

predicted_colnames = "predict_mu predict_linpred_std predict_hat".split()

predicted_rownames = ["r" + str(n) for n in range(1, 18)]

resids = np.array(
    [
        2.1847612857819,
        2.1847612857819,
        0.36650228500366,
        0.36649596691132,
        0.3702706694603,
        0.06275302171707,
        1.6973150968552,
        1.6973150968552,
        0.60597640275955,
        0.60585051774979,
        0.62808901071548,
        0.23242343962193,
        4.7459564208984,
        4.7459564208984,
        3.0897438526154,
        3.0483965873718,
        4.2380628585815,
        3.7845225334167,
        0.02652905881405,
        0.02652905881405,
        0.01329397037625,
        0.01329396758229,
        0.01330873556435,
        0.00667654490098,
        0.92601269483566,
        0.92601269483566,
        0.60273587703705,
        0.60233747959137,
        0.64300429821014,
        0.44648909568787,
        0.8528453707695,
        0.8528453707695,
        0.72065913677216,
        0.71955502033234,
        0.7962681055069,
        0.7434441447258,
        0.22364875674248,
        0.22364875674248,
        0.16446639597416,
        0.16445553302765,
        0.16780391335487,
        0.12590345740318,
        -0.26983660459518,
        -0.26983660459518,
        -0.1828535348177,
        -0.18284019827843,
        -0.1791032999754,
        -0.11887931078672,
        -0.63495022058487,
        -0.63495022058487,
        -0.53598040342331,
        -0.53542107343674,
        -0.49657794833183,
        -0.38836058974266,
        -1.7504912614822,
        -1.7504912614822,
        -1.2204585075378,
        -1.2154930830002,
        -1.0554916858673,
        -0.63642859458923,
        -1.862185716629,
        -1.862185716629,
        -1.2788465023041,
        -1.2732635736465,
        -1.1007128953934,
        -0.65061664581299,
        -2.5617923736572,
        -2.5617923736572,
        -1.617108464241,
        -1.6071890592575,
        -1.3574055433273,
        -0.71924245357513,
        -1.6135795116425,
        -1.6135795116425,
        -1.1469231843948,
        -1.1426799297333,
        -0.99809640645981,
        -0.61738300323486,
        0.22420094907284,
        0.22420094907284,
        0.24363535642624,
        0.24356025457382,
        0.25454398989677,
        0.28899359703064,
        0.06624934077263,
        0.06624934077263,
        0.06777309626341,
        0.06777160614729,
        0.06855925172567,
        0.07094971090555,
        0.43318045139313,
        0.43318045139313,
        0.51954871416092,
        0.51871728897095,
        0.57536894083023,
        0.76422989368439,
        -0.89140218496323,
        -0.89140218496323,
        -0.7140833735466,
        -0.7128586769104,
        -0.64815932512283,
        -0.47129172086716,
    ]
).reshape(17, 6)

resids_colnames = [
    "score_factor",
    "resid_response",
    "resid_anscombe",
    "resid_deviance",
    "resid_pearson",
    "resid_working",
]

resids_rownames = ["r" + str(n) for n in range(1, 18)]


results_poisson_fweight_nonrobust = ParamsTableTestBunch(
    params_table=params_table,
    params_table_colnames=params_table_colnames,
    params_table_rownames=params_table_rownames,
    cov=cov,
    cov_colnames=cov_colnames,
    cov_rownames=cov_rownames,
    infocrit=infocrit,
    infocrit_colnames=infocrit_colnames,
    infocrit_rownames=infocrit_rownames,
    predicted=predicted,
    predicted_colnames=predicted_colnames,
    predicted_rownames=predicted_rownames,
    resids=resids,
    resids_colnames=resids_colnames,
    resids_rownames=resids_rownames,
    **est,
)

est = dict(
    deviance=12.02863083186947,
    dispers=1.202863083186947,
    deviance_s=12.02863083186947,
    dispers_s=1.202863083186947,
    deviance_p=15.48630027479802,
    dispers_p=1.548630027479802,
    deviance_ps=15.48630027479802,
    dispers_ps=1.548630027479802,
    bic=-16.30350260869269,
    nbml=0,
    N=17,
    ic=3,
    k=7,
    k_eq=1,
    k_dv=1,
    converged=1,
    k_autoCns=0,
    ll=-27.28727618329841,
    chi2=94.62492461274286,
    p=3.30927661191e-18,
    rc=0,
    aic=4.033797198035106,
    rank=7,
    canonical=1,
    power=0,
    df_m=6,
    df=10,
    vf=1,
    phi=1,
    k_eq_model=0,
    properties="b V",
    depvar="executions",
    which="max",
    technique="nr",
    singularHmethod="m-marquardt",
    ml_method="e2",
    crittype="log likelihood",
    user="glim_lf",
    title="Generalized linear models",
    opt="moptimize",
    chi2type="Wald",
    wtype="aweight",
    wexp="= fweight",
    link="glim_l03",
    varfunc="glim_v3",
    m="1",
    a="1",
    oim="oim",
    opt1="ML",
    varfuncf="u",
    varfunct="Poisson",
    linkf="ln(u)",
    linkt="Log",
    vce="oim",
    vcetype="OIM",
    hac_lag="15",
    marginsok="default",
    marginsnotok="stdp Anscombe Cooksd Deviance Hat Likelihood Pearson Response Score Working ADJusted STAndardized STUdentized MODified",  # noqa:E501
    predict="glim_p",
    cmd="glm",
    cmdline="glm executions income perpoverty perblack LN_VC100k96 south degree [aweight=fweight], family(poisson)",  # noqa:E501
)

params_table = np.array(
    [
        0.00025343868829,
        0.00005594520811,
        4.5301232557793,
        5.894928560e-06,
        0.00014378809529,
        0.00036308928129,
        np.nan,
        1.9599639845401,
        0,
        0.09081422305585,
        0.09018031800722,
        1.0070293059798,
        0.31392069129295,
        -0.08593595235267,
        0.26756439846436,
        np.nan,
        1.9599639845401,
        0,
        -0.09416451429381,
        0.02501975991718,
        -3.7636058301716,
        0.00016748080115,
        -0.14320234263332,
        -0.04512668595429,
        np.nan,
        1.9599639845401,
        0,
        0.27652273809507,
        0.53816281293549,
        0.51382728692594,
        0.60737274844619,
        -0.77825699307725,
        1.3313024692674,
        np.nan,
        1.9599639845401,
        0,
        2.239890838384,
        0.50630271729905,
        4.424015044464,
        9.688326910e-06,
        1.2475557472031,
        3.2322259295649,
        np.nan,
        1.9599639845401,
        0,
        -18.842583191417,
        5.2065333302747,
        -3.6190267105084,
        0.00029571311817,
        -29.047201003062,
        -8.6379653797707,
        np.nan,
        1.9599639845401,
        0,
        -6.5630017977417,
        4.5075460479893,
        -1.4560032727052,
        0.14539171490364,
        -15.397629710457,
        2.2716261149733,
        np.nan,
        1.9599639845401,
        0,
    ]
).reshape(7, 9)

params_table_colnames = "b se z pvalue ll ul df crit eform".split()

params_table_rownames = [
    "income",
    "perpoverty",
    "perblack",
    "LN_VC100k96",
    "south",
    "degree",
    "_cons",
]

cov = np.array(
    [
        3.129866310e-09,
        2.467206465e-06,
        1.706246053e-07,
        -3.176637541e-07,
        -6.238332985e-06,
        -0.00010954424563,
        -0.000120350676,
        2.467206465e-06,
        0.00813248975588,
        0.00032161167774,
        -0.00128998199687,
        -0.01831266258952,
        0.14012008775466,
        -0.21862639048575,
        1.706246053e-07,
        0.00032161167774,
        0.00062598838631,
        -0.00690661599067,
        -0.00759732903266,
        -0.03651168891971,
        0.03689627396044,
        -3.176637541e-07,
        -0.00128998199687,
        -0.00690661599067,
        0.28961921322663,
        0.04817967329131,
        0.52320524326798,
        -1.8618850102603,
        -6.238332985e-06,
        -0.01831266258952,
        -0.00759732903266,
        0.04817967329131,
        0.2563424415444,
        0.86118714295143,
        -0.05787604759173,
        -0.00010954424563,
        0.14012008775466,
        -0.03651168891971,
        0.52320524326798,
        0.86118714295143,
        27.107989319261,
        -7.0873136260377,
        -0.000120350676,
        -0.21862639048575,
        0.03689627396044,
        -1.8618850102603,
        -0.05787604759173,
        -7.0873136260377,
        20.317971374744,
    ]
).reshape(7, 7)

cov_colnames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

cov_rownames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

infocrit = np.array([17, np.nan, -27.287276183298, 7, 68.574552366597, 74.40704577499])

infocrit_colnames = "N ll0 ll df AIC BIC".split()

infocrit_rownames = ".".split()

predicted = np.array(
    [
        34.815238952637,
        0.23209382593632,
        1.8754115104675,
        7.3026847839355,
        0.45640400052071,
        1.521183013916,
        1.2540435791016,
        0.36330956220627,
        0.16552601754665,
        3.9734709262848,
        0.34751656651497,
        0.47986721992493,
        2.0739872455597,
        0.34389564394951,
        0.2452784627676,
        1.1471545696259,
        0.63293009996414,
        0.45955070853233,
        1.7763512134552,
        0.38466224074364,
        0.2628378868103,
        2.2698366641998,
        0.35724925994873,
        0.28969252109528,
        1.6349502801895,
        0.38501682877541,
        0.24236169457436,
        2.7504913806915,
        0.55104273557663,
        0.83518141508102,
        2.862185716629,
        0.55352979898453,
        0.87696009874344,
        3.5617923736572,
        0.54546248912811,
        1.0597376823425,
        2.6135795116425,
        0.41179683804512,
        0.44320201873779,
        0.775799036026,
        0.5664399266243,
        0.24891836941242,
        0.93375068902969,
        0.40948873758316,
        0.15657225251198,
        0.56681954860687,
        0.40214782953262,
        0.09166768193245,
        1.8914022445679,
        0.30498126149178,
        0.17592607438564,
    ]
).reshape(17, 3)

predicted_colnames = "predict_mu predict_linpred_std predict_hat".split()

predicted_rownames = ["r" + str(n) for n in range(1, 18)]

resids = np.array(
    [
        2.1847612857819,
        2.1847612857819,
        0.36650228500366,
        0.36649596691132,
        0.3702706694603,
        0.06275302171707,
        1.6973150968552,
        1.6973150968552,
        0.60597640275955,
        0.60585051774979,
        0.62808901071548,
        0.23242343962193,
        4.7459564208984,
        4.7459564208984,
        3.0897438526154,
        3.0483965873718,
        4.2380628585815,
        3.7845225334167,
        0.02652905881405,
        0.02652905881405,
        0.01329397037625,
        0.01329396758229,
        0.01330873556435,
        0.00667654490098,
        0.92601269483566,
        0.92601269483566,
        0.60273587703705,
        0.60233747959137,
        0.64300429821014,
        0.44648909568787,
        0.8528453707695,
        0.8528453707695,
        0.72065913677216,
        0.71955502033234,
        0.7962681055069,
        0.7434441447258,
        0.22364875674248,
        0.22364875674248,
        0.16446639597416,
        0.16445553302765,
        0.16780391335487,
        0.12590345740318,
        -0.26983660459518,
        -0.26983660459518,
        -0.1828535348177,
        -0.18284019827843,
        -0.1791032999754,
        -0.11887931078672,
        -0.63495022058487,
        -0.63495022058487,
        -0.53598040342331,
        -0.53542107343674,
        -0.49657794833183,
        -0.38836058974266,
        -1.7504912614822,
        -1.7504912614822,
        -1.2204585075378,
        -1.2154930830002,
        -1.0554916858673,
        -0.63642859458923,
        -1.862185716629,
        -1.862185716629,
        -1.2788465023041,
        -1.2732635736465,
        -1.1007128953934,
        -0.65061664581299,
        -2.5617923736572,
        -2.5617923736572,
        -1.617108464241,
        -1.6071890592575,
        -1.3574055433273,
        -0.71924245357513,
        -1.6135795116425,
        -1.6135795116425,
        -1.1469231843948,
        -1.1426799297333,
        -0.99809640645981,
        -0.61738300323486,
        0.22420094907284,
        0.22420094907284,
        0.24363535642624,
        0.24356025457382,
        0.25454398989677,
        0.28899359703064,
        0.06624934077263,
        0.06624934077263,
        0.06777309626341,
        0.06777160614729,
        0.06855925172567,
        0.07094971090555,
        0.43318045139313,
        0.43318045139313,
        0.51954871416092,
        0.51871728897095,
        0.57536894083023,
        0.76422989368439,
        -0.89140218496323,
        -0.89140218496323,
        -0.7140833735466,
        -0.7128586769104,
        -0.64815932512283,
        -0.47129172086716,
    ]
).reshape(17, 6)

resids_colnames = [
    "score_factor",
    "resid_response",
    "resid_anscombe",
    "resid_deviance",
    "resid_pearson",
    "resid_working",
]

resids_rownames = ["r" + str(n) for n in range(1, 18)]


results_poisson_aweight_nonrobust = ParamsTableTestBunch(
    params_table=params_table,
    params_table_colnames=params_table_colnames,
    params_table_rownames=params_table_rownames,
    cov=cov,
    cov_colnames=cov_colnames,
    cov_rownames=cov_rownames,
    infocrit=infocrit,
    infocrit_colnames=infocrit_colnames,
    infocrit_rownames=infocrit_rownames,
    predicted=predicted,
    predicted_colnames=predicted_colnames,
    predicted_rownames=predicted_rownames,
    resids=resids,
    resids_colnames=resids_colnames,
    resids_rownames=resids_rownames,
    **est,
)

est = dict(
    deviance=23.34969514421719,
    dispers=2.33496951442172,
    deviance_s=23.34969514421719,
    dispers_s=2.33496951442172,
    deviance_p=30.06164170990202,
    dispers_p=3.006164170990202,
    deviance_ps=30.06164170990202,
    dispers_ps=3.006164170990202,
    bic=-4.982438296344967,
    nbml=0,
    N=17,
    ic=3,
    k=7,
    k_eq=1,
    k_dv=1,
    converged=1,
    k_autoCns=0,
    ll=-52.96941847346162,
    chi2=356.6637749656061,
    p=5.72458312679e-74,
    rc=0,
    aic=7.055225702760191,
    rank=7,
    canonical=1,
    power=0,
    df_m=6,
    df=10,
    vf=1,
    phi=1,
    k_eq_model=0,
    properties="b V",
    depvar="executions",
    which="max",
    technique="nr",
    singularHmethod="m-marquardt",
    ml_method="e2",
    crittype="log pseudolikelihood",
    user="glim_lf",
    title="Generalized linear models",
    opt="moptimize",
    chi2type="Wald",
    wtype="pweight",
    wexp="= fweight",
    link="glim_l03",
    varfunc="glim_v3",
    m="1",
    a="1",
    oim="oim",
    opt1="ML",
    varfuncf="u",
    varfunct="Poisson",
    linkf="ln(u)",
    linkt="Log",
    vcetype="Robust",
    hac_lag="15",
    marginsok="default",
    marginsnotok="stdp Anscombe Cooksd Deviance Hat Likelihood Pearson Response Score Working ADJusted STAndardized STUdentized MODified",  # noqa:E501
    predict="glim_p",
    cmd="glm",
    cmdline="glm executions income perpoverty perblack LN_VC100k96 south degree [pweight=fweight], family(poisson)",  # noqa:E501
)

params_table = np.array(
    [
        0.00025343868829,
        0.0000298866597,
        8.4799937786829,
        2.252059827e-17,
        0.00019486191167,
        0.00031201546491,
        np.nan,
        1.9599639845401,
        0,
        0.09081422305585,
        0.08414617969117,
        1.0792435662456,
        0.28047916301946,
        -0.07410925857549,
        0.25573770468718,
        np.nan,
        1.9599639845401,
        0,
        -0.09416451429381,
        0.01946961498728,
        -4.8364856909253,
        1.321547815e-06,
        -0.13232425846174,
        -0.05600477012587,
        np.nan,
        1.9599639845401,
        0,
        0.27652273809506,
        0.36112179485191,
        0.76573261995571,
        0.44383541350407,
        -0.43126297384714,
        0.98430845003726,
        np.nan,
        1.9599639845401,
        0,
        2.239890838384,
        0.43098853454849,
        5.1971007551989,
        2.024206636e-07,
        1.3951688329193,
        3.0846128438487,
        np.nan,
        1.9599639845401,
        0,
        -18.842583191417,
        4.5147658917489,
        -4.1735460139479,
        0.00002998950578,
        -27.691361737874,
        -9.9938046449589,
        np.nan,
        1.9599639845401,
        0,
        -6.5630017977416,
        3.3999612612355,
        -1.930316639948,
        0.0535676165153,
        -13.226803418595,
        0.10079982311137,
        np.nan,
        1.9599639845401,
        0,
    ]
).reshape(7, 9)

params_table_colnames = "b se z pvalue ll ul df crit eform".split()

params_table_rownames = [
    "income",
    "perpoverty",
    "perblack",
    "LN_VC100k96",
    "south",
    "degree",
    "_cons",
]

cov = np.array(
    [
        8.932124278e-10,
        1.512127962e-06,
        1.877263788e-07,
        -4.562869239e-06,
        -2.023379829e-06,
        -0.00001228516761,
        -0.00002423071544,
        1.512127962e-06,
        0.00708057955662,
        0.00028427703202,
        -0.0019549511748,
        -0.00596332288528,
        0.20022061835302,
        -0.18678265108673,
        1.877263788e-07,
        0.00028427703202,
        0.00037906590775,
        -0.00453407701816,
        -0.00623061980467,
        -0.04659404972535,
        0.02694184589715,
        -4.562869239e-06,
        -0.0019549511748,
        -0.00453407701816,
        0.13040895071706,
        0.0836259691825,
        0.89260578257395,
        -0.82275604425197,
        -2.023379829e-06,
        -0.00596332288528,
        -0.00623061980467,
        0.0836259691825,
        0.18575111691225,
        1.0698498854979,
        -0.64859219982217,
        -0.00001228516761,
        0.20022061835302,
        -0.04659404972535,
        0.89260578257395,
        1.0698498854979,
        20.383111057299,
        -12.482192460755,
        -0.00002423071544,
        -0.18678265108673,
        0.02694184589715,
        -0.82275604425197,
        -0.64859219982217,
        -12.482192460755,
        11.559736577902,
    ]
).reshape(7, 7)

cov_colnames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

cov_rownames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

infocrit = np.array([17, np.nan, -52.969418473462, 7, 119.93883694692, 125.77133035532])

infocrit_colnames = "N ll0 ll df AIC BIC".split()

infocrit_rownames = ".".split()

predicted = np.array(
    [
        34.815238952637,
        0.06858423352242,
        7.3026847839355,
        0.25687274336815,
        1.2540435791016,
        0.41320022940636,
        3.9734709262848,
        0.16020278632641,
        2.0739872455597,
        0.22170753777027,
        1.1471545696259,
        0.51121062040329,
        1.7763512134552,
        0.2167394310236,
        2.2698366641998,
        0.2456086575985,
        1.6349502801895,
        0.25546172261238,
        2.7504913806915,
        0.4417819082737,
        2.862185716629,
        0.61734634637833,
        3.5617923736572,
        0.51518148183823,
        2.6135795116425,
        0.34006628394127,
        0.775799036026,
        0.292076587677,
        0.93375068902969,
        0.39795544743538,
        0.56681954860687,
        0.31529840826988,
        1.8914022445679,
        0.26116076111794,
    ]
).reshape(17, 2)

predicted_colnames = "predict_mu predict_linpred_std".split()

predicted_rownames = ["r" + str(n) for n in range(1, 18)]

resids = np.array(
    [
        2.1847612857819,
        2.1847612857819,
        0.36650228500366,
        0.36649596691132,
        0.3702706694603,
        0.06275302171707,
        1.6973150968552,
        1.6973150968552,
        0.60597640275955,
        0.60585051774979,
        0.62808901071548,
        0.23242343962193,
        4.7459564208984,
        4.7459564208984,
        3.0897438526154,
        3.0483965873718,
        4.2380628585815,
        3.7845225334167,
        0.02652905881405,
        0.02652905881405,
        0.01329397037625,
        0.01329396758229,
        0.01330873556435,
        0.00667654490098,
        0.92601269483566,
        0.92601269483566,
        0.60273587703705,
        0.60233747959137,
        0.64300429821014,
        0.44648909568787,
        0.8528453707695,
        0.8528453707695,
        0.72065913677216,
        0.71955502033234,
        0.7962681055069,
        0.7434441447258,
        0.22364875674248,
        0.22364875674248,
        0.16446639597416,
        0.16445553302765,
        0.16780391335487,
        0.12590345740318,
        -0.26983660459518,
        -0.26983660459518,
        -0.1828535348177,
        -0.18284019827843,
        -0.1791032999754,
        -0.11887931078672,
        -0.63495022058487,
        -0.63495022058487,
        -0.53598040342331,
        -0.53542107343674,
        -0.49657794833183,
        -0.38836058974266,
        -1.7504912614822,
        -1.7504912614822,
        -1.2204585075378,
        -1.2154930830002,
        -1.0554916858673,
        -0.63642859458923,
        -1.862185716629,
        -1.862185716629,
        -1.2788465023041,
        -1.2732635736465,
        -1.1007128953934,
        -0.65061664581299,
        -2.5617923736572,
        -2.5617923736572,
        -1.617108464241,
        -1.6071890592575,
        -1.3574055433273,
        -0.71924245357513,
        -1.6135795116425,
        -1.6135795116425,
        -1.1469231843948,
        -1.1426799297333,
        -0.99809640645981,
        -0.61738300323486,
        0.22420094907284,
        0.22420094907284,
        0.24363535642624,
        0.24356025457382,
        0.25454398989677,
        0.28899359703064,
        0.06624934077263,
        0.06624934077263,
        0.06777309626341,
        0.06777160614729,
        0.06855925172567,
        0.07094971090555,
        0.43318045139313,
        0.43318045139313,
        0.51954871416092,
        0.51871728897095,
        0.57536894083023,
        0.76422989368439,
        -0.89140218496323,
        -0.89140218496323,
        -0.7140833735466,
        -0.7128586769104,
        -0.64815932512283,
        -0.47129172086716,
    ]
).reshape(17, 6)

resids_colnames = [
    "score_factor",
    "resid_response",
    "resid_anscombe",
    "resid_deviance",
    "resid_pearson",
    "resid_working",
]

resids_rownames = ["r" + str(n) for n in range(1, 18)]


results_poisson_pweight_nonrobust = ParamsTableTestBunch(
    params_table=params_table,
    params_table_colnames=params_table_colnames,
    params_table_rownames=params_table_rownames,
    cov=cov,
    cov_colnames=cov_colnames,
    cov_rownames=cov_rownames,
    infocrit=infocrit,
    infocrit_colnames=infocrit_colnames,
    infocrit_rownames=infocrit_rownames,
    predicted=predicted,
    predicted_colnames=predicted_colnames,
    predicted_rownames=predicted_rownames,
    resids=resids,
    resids_colnames=resids_colnames,
    resids_rownames=resids_rownames,
    **est,
)

est = dict(
    k_eq_model=0,
    phi=1,
    vf=1,
    df=10,
    df_m=6,
    power=0,
    canonical=1,
    rank=7,
    aic=4.579685683305704,
    rc=0,
    p=5.09268495340e-76,
    chi2=366.2131475852884,
    ll=-31.92732830809848,
    k_autoCns=0,
    converged=1,
    k_dv=1,
    k_eq=1,
    k=7,
    ic=3,
    N=17,
    nbml=0,
    bic=-9.740492454486454,
    dispers_ps=2.475374834715614,
    deviance_ps=24.75374834715614,
    dispers_p=2.475374834715614,
    deviance_p=24.75374834715614,
    dispers_s=1.859164098607571,
    deviance_s=18.59164098607571,
    dispers=1.859164098607571,
    deviance=18.59164098607571,
    cmdline="glm executions income perpoverty perblack LN_VC100k96 south degree, family(poisson) vce(robust)",  # noqa:E501
    cmd="glm",
    predict="glim_p",
    marginsnotok="stdp Anscombe Cooksd Deviance Hat Likelihood Pearson Response Score Working ADJusted STAndardized STUdentized MODified",  # noqa:E501
    marginsok="default",
    hac_lag="15",
    vcetype="Robust",
    vce="robust",
    linkt="Log",
    linkf="ln(u)",
    varfunct="Poisson",
    varfuncf="u",
    opt1="ML",
    oim="oim",
    a="1",
    m="1",
    varfunc="glim_v3",
    link="glim_l03",
    chi2type="Wald",
    opt="moptimize",
    title="Generalized linear models",
    user="glim_lf",
    crittype="log pseudolikelihood",
    ml_method="e2",
    singularHmethod="m-marquardt",
    technique="nr",
    which="max",
    depvar="executions",
    properties="b V",
)

params_table = np.array(
    [
        0.00026110166569,
        0.00003534474167,
        7.3872845963787,
        1.498576223e-13,
        0.00019182724497,
        0.0003303760864,
        np.nan,
        1.9599639845401,
        0,
        0.07781804809828,
        0.09819599835909,
        0.79247677500784,
        0.42808272865983,
        -0.11464257211148,
        0.27027866830805,
        np.nan,
        1.9599639845401,
        0,
        -0.09493110013466,
        0.01944446025221,
        -4.8821668950083,
        1.049263903e-06,
        -0.13304154192782,
        -0.0568206583415,
        np.nan,
        1.9599639845401,
        0,
        0.29693462055586,
        0.34917491559373,
        0.85038932436186,
        0.39510866948496,
        -0.38743563831266,
        0.98130487942439,
        np.nan,
        1.9599639845401,
        0,
        2.3011832004524,
        0.45717041903387,
        5.0335347709405,
        4.815174289e-07,
        1.405145644349,
        3.1972207565559,
        np.nan,
        1.9599639845401,
        0,
        -18.722067603077,
        4.5006120067298,
        -4.1598937155841,
        0.00003183957242,
        -27.543105044656,
        -9.9010301614985,
        np.nan,
        1.9599639845401,
        0,
        -6.8014789919532,
        3.48445447794,
        -1.9519494471841,
        0.05094420680386,
        -13.630884274485,
        0.02792629057847,
        np.nan,
        1.9599639845401,
        0,
    ]
).reshape(7, 9)

params_table_colnames = "b se z pvalue ll ul df crit eform".split()

params_table_rownames = [
    "income",
    "perpoverty",
    "perblack",
    "LN_VC100k96",
    "south",
    "degree",
    "_cons",
]

cov = np.array(
    [
        1.249250764e-09,
        2.158351725e-06,
        1.068227835e-07,
        -5.170410321e-06,
        -5.047866044e-07,
        -0.00001662944527,
        -0.00004339679838,
        2.158351725e-06,
        0.00964245409374,
        0.00008635335196,
        -0.00640596402935,
        -0.00524426268669,
        0.23390140895418,
        -0.22653903184676,
        1.068227835e-07,
        0.00008635335196,
        0.0003780870345,
        -0.00382751790532,
        -0.0064534643179,
        -0.05137117620883,
        0.02948709519544,
        -5.170410321e-06,
        -0.00640596402935,
        -0.00382751790532,
        0.12192312167989,
        0.0907733380116,
        0.89729289134262,
        -0.69004336039169,
        -5.047866044e-07,
        -0.00524426268669,
        -0.0064534643179,
        0.0907733380116,
        0.20900479203961,
        0.93952111535021,
        -0.75843860743141,
        -0.00001662944527,
        0.23390140895418,
        -0.05137117620883,
        0.89729289134262,
        0.93952111535021,
        20.25550843512,
        -12.691830440798,
        -0.00004339679838,
        -0.22653903184676,
        0.02948709519544,
        -0.69004336039169,
        -0.75843860743141,
        -12.691830440798,
        12.141423008836,
    ]
).reshape(7, 7)

cov_colnames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

cov_rownames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

infocrit = np.array([17, np.nan, -31.927328308098, 7, 77.854656616197, 83.68715002459])

infocrit_colnames = "N ll0 ll df AIC BIC".split()

infocrit_rownames = ".".split()

predicted = np.array(
    [
        35.226364135742,
        0.05631958693266,
        8.1965742111206,
        0.14089094102383,
        1.3118965625763,
        0.51714926958084,
        3.6862981319427,
        0.20286601781845,
        2.0823004245758,
        0.27275583148003,
        1.0650315284729,
        0.58616667985916,
        1.9260421991348,
        0.30098018050194,
        2.4171404838562,
        0.34251752495766,
        1.8473218679428,
        0.29685723781586,
        2.8643238544464,
        0.47364214062691,
        3.1211984157562,
        0.72507524490356,
        3.338207244873,
        0.54493451118469,
        2.5269968509674,
        0.34425318241119,
        0.89725440740585,
        0.37162157893181,
        0.97933322191238,
        0.50227928161621,
        0.53462094068527,
        0.40906101465225,
        1.9790935516357,
        0.33805811405182,
    ]
).reshape(17, 2)

predicted_colnames = "predict_mu predict_linpred_std".split()

predicted_rownames = ["r" + str(n) for n in range(1, 18)]


results_poisson_none_hc1 = ParamsTableTestBunch(
    params_table=params_table,
    params_table_colnames=params_table_colnames,
    params_table_rownames=params_table_rownames,
    cov=cov,
    cov_colnames=cov_colnames,
    cov_rownames=cov_rownames,
    infocrit=infocrit,
    infocrit_colnames=infocrit_colnames,
    infocrit_rownames=infocrit_rownames,
    predicted=predicted,
    predicted_colnames=predicted_colnames,
    predicted_rownames=predicted_rownames,
    **est,
)

est = dict(
    k_eq_model=0,
    phi=1,
    vf=1,
    df=26,
    df_m=6,
    power=0,
    canonical=1,
    rank=7,
    aic=3.634510210512826,
    rc=0,
    p=1.5690245831e-115,
    chi2=549.7874580263729,
    ll=-52.96941847346162,
    k_autoCns=0,
    converged=1,
    k_dv=1,
    k_eq=1,
    k=7,
    ic=3,
    N=33,
    nbml=0,
    bic=-67.5595014539113,
    dispers_ps=1.156216988842385,
    deviance_ps=30.06164170990202,
    dispers_p=1.156216988842385,
    deviance_p=30.06164170990202,
    dispers_s=0.8980651978545075,
    deviance_s=23.34969514421719,
    dispers=0.8980651978545075,
    deviance=23.34969514421719,
    cmdline="glm executions income perpoverty perblack LN_VC100k96 south degree [fweight=fweight], family(poisson) vce(robust)",  # noqa:E501
    cmd="glm",
    predict="glim_p",
    marginsnotok="stdp Anscombe Cooksd Deviance Hat Likelihood Pearson Response Score Working ADJusted STAndardized STUdentized MODified",  # noqa:E501
    marginsok="default",
    hac_lag="15",
    vcetype="Robust",
    vce="robust",
    linkt="Log",
    linkf="ln(u)",
    varfunct="Poisson",
    varfuncf="u",
    opt1="ML",
    oim="oim",
    a="1",
    m="1",
    varfunc="glim_v3",
    link="glim_l03",
    wexp="= fweight",
    wtype="fweight",
    chi2type="Wald",
    opt="moptimize",
    title="Generalized linear models",
    user="glim_lf",
    crittype="log pseudolikelihood",
    ml_method="e2",
    singularHmethod="m-marquardt",
    technique="nr",
    which="max",
    depvar="executions",
    properties="b V",
)

params_table = np.array(
    [
        0.00025343868829,
        0.0000263369674,
        9.6229259983619,
        6.398464168e-22,
        0.00020181918073,
        0.00030505819585,
        np.nan,
        1.9599639845401,
        0,
        0.09081422305585,
        0.07431850776812,
        1.2219597215163,
        0.22172285914198,
        -0.05484737555444,
        0.23647582166613,
        np.nan,
        1.9599639845401,
        0,
        -0.09416451429381,
        0.01609416304158,
        -5.8508487860178,
        4.890707145e-09,
        -0.12570849421662,
        -0.06262053437099,
        np.nan,
        1.9599639845401,
        0,
        0.27652273809506,
        0.34481886883624,
        0.80193621372381,
        0.42258985672342,
        -0.3993098260138,
        0.95235530220392,
        np.nan,
        1.9599639845401,
        0,
        2.239890838384,
        0.39682271484988,
        5.6445630619491,
        1.656012749e-08,
        1.4621326090308,
        3.0176490677372,
        np.nan,
        1.9599639845401,
        0,
        -18.842583191417,
        4.1473740870735,
        -4.5432562377589,
        5.539185130e-06,
        -26.971287032495,
        -10.713879350338,
        np.nan,
        1.9599639845401,
        0,
        -6.5630017977416,
        3.0810023455152,
        -2.1301515097173,
        0.03315910688542,
        -12.601655431235,
        -0.52434816424841,
        np.nan,
        1.9599639845401,
        0,
    ]
).reshape(7, 9)

params_table_colnames = "b se z pvalue ll ul df crit eform".split()

params_table_rownames = [
    "income",
    "perpoverty",
    "perblack",
    "LN_VC100k96",
    "south",
    "degree",
    "_cons",
]

cov = np.array(
    [
        6.936358517e-10,
        1.301395377e-06,
        1.497821854e-07,
        -4.758016826e-06,
        -1.852598001e-06,
        -6.904571080e-06,
        -0.00001327109619,
        1.301395377e-06,
        0.00552324059688,
        0.00014714335792,
        -0.00376147485446,
        -0.00118957690573,
        0.15979100738539,
        -0.13853266210904,
        1.497821854e-07,
        0.00014714335792,
        0.00025902208401,
        -0.00418693954572,
        -0.00513741847691,
        -0.03987504442994,
        0.02761179707845,
        -4.758016826e-06,
        -0.00376147485446,
        -0.00418693954572,
        0.1189000523055,
        0.08682729933237,
        0.80541854027627,
        -0.70545315416752,
        -1.852598001e-06,
        -0.00118957690573,
        -0.00513741847691,
        0.08682729933237,
        0.15746826702083,
        1.1366624064282,
        -0.75098089879076,
        -6.904571080e-06,
        0.15979100738539,
        -0.03987504442994,
        0.80541854027627,
        1.1366624064282,
        17.200711818129,
        -11.062121016981,
        -0.00001327109619,
        -0.13853266210904,
        0.02761179707845,
        -0.70545315416752,
        -0.75098089879076,
        -11.062121016981,
        9.49257545307,
    ]
).reshape(7, 7)

cov_colnames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

cov_rownames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

infocrit = np.array([33, np.nan, -52.969418473462, 7, 119.93883694692, 130.41438987719])

infocrit_colnames = "N ll0 ll df AIC BIC".split()

infocrit_rownames = ".".split()

predicted = np.array(
    [
        34.815238952637,
        0.06608480215073,
        7.3026847839355,
        0.23366995155811,
        1.2540435791016,
        0.39606991410255,
        3.9734709262848,
        0.12350843846798,
        2.0739872455597,
        0.18263976275921,
        1.1471545696259,
        0.39735752344131,
        1.7763512134552,
        0.17952646315098,
        2.2698366641998,
        0.21028706431389,
        1.6349502801895,
        0.17675416171551,
        2.7504913806915,
        0.42150634527206,
        2.862185716629,
        0.58209121227264,
        3.5617923736572,
        0.49835306406021,
        2.6135795116425,
        0.2456089258194,
        0.775799036026,
        0.23251366615295,
        0.93375068902969,
        0.35320028662682,
        0.56681954860687,
        0.26245352625847,
        1.8914022445679,
        0.20374123752117,
    ]
).reshape(17, 2)

predicted_colnames = "predict_mu predict_linpred_std".split()

predicted_rownames = ["r" + str(n) for n in range(1, 18)]


results_poisson_fweight_hc1 = ParamsTableTestBunch(
    params_table=params_table,
    params_table_colnames=params_table_colnames,
    params_table_rownames=params_table_rownames,
    cov=cov,
    cov_colnames=cov_colnames,
    cov_rownames=cov_rownames,
    infocrit=infocrit,
    infocrit_colnames=infocrit_colnames,
    infocrit_rownames=infocrit_rownames,
    predicted=predicted,
    predicted_colnames=predicted_colnames,
    predicted_rownames=predicted_rownames,
    **est,
)

est = dict(
    k_eq_model=0,
    phi=1,
    vf=1,
    df=10,
    df_m=6,
    power=0,
    canonical=1,
    rank=7,
    aic=4.033797198035106,
    rc=0,
    p=5.72458312675e-74,
    chi2=356.663774965618,
    ll=-27.28727618329841,
    k_autoCns=0,
    converged=1,
    k_dv=1,
    k_eq=1,
    k=7,
    ic=3,
    N=17,
    nbml=0,
    bic=-16.30350260869269,
    dispers_ps=1.548630027479802,
    deviance_ps=15.48630027479802,
    dispers_p=1.548630027479802,
    deviance_p=15.48630027479802,
    dispers_s=1.202863083186947,
    deviance_s=12.02863083186947,
    dispers=1.202863083186947,
    deviance=12.02863083186947,
    cmdline="glm executions income perpoverty perblack LN_VC100k96 south degree [aweight=fweight], family(poisson) vce(robust)",  # noqa:E501
    cmd="glm",
    predict="glim_p",
    marginsnotok="stdp Anscombe Cooksd Deviance Hat Likelihood Pearson Response Score Working ADJusted STAndardized STUdentized MODified",  # noqa:E501
    marginsok="default",
    hac_lag="15",
    vcetype="Robust",
    vce="robust",
    linkt="Log",
    linkf="ln(u)",
    varfunct="Poisson",
    varfuncf="u",
    opt1="ML",
    oim="oim",
    a="1",
    m="1",
    varfunc="glim_v3",
    link="glim_l03",
    wexp="= fweight",
    wtype="aweight",
    chi2type="Wald",
    opt="moptimize",
    title="Generalized linear models",
    user="glim_lf",
    crittype="log pseudolikelihood",
    ml_method="e2",
    singularHmethod="m-marquardt",
    technique="nr",
    which="max",
    depvar="executions",
    properties="b V",
)

params_table = np.array(
    [
        0.00025343868829,
        0.0000298866597,
        8.4799937786833,
        2.252059827e-17,
        0.00019486191167,
        0.00031201546491,
        np.nan,
        1.9599639845401,
        0,
        0.09081422305585,
        0.08414617969118,
        1.0792435662455,
        0.28047916301948,
        -0.0741092585755,
        0.25573770468719,
        np.nan,
        1.9599639845401,
        0,
        -0.09416451429381,
        0.01946961498728,
        -4.8364856909248,
        1.321547815e-06,
        -0.13232425846174,
        -0.05600477012587,
        np.nan,
        1.9599639845401,
        0,
        0.27652273809507,
        0.36112179485206,
        0.76573261995541,
        0.44383541350425,
        -0.43126297384744,
        0.98430845003758,
        np.nan,
        1.9599639845401,
        0,
        2.239890838384,
        0.4309885345485,
        5.1971007551988,
        2.024206636e-07,
        1.3951688329193,
        3.0846128438488,
        np.nan,
        1.9599639845401,
        0,
        -18.842583191417,
        4.5147658917496,
        -4.1735460139472,
        0.00002998950578,
        -27.691361737876,
        -9.9938046449574,
        np.nan,
        1.9599639845401,
        0,
        -6.5630017977417,
        3.3999612612367,
        -1.9303166399474,
        0.05356761651539,
        -13.226803418597,
        0.10079982311369,
        np.nan,
        1.9599639845401,
        0,
    ]
).reshape(7, 9)

params_table_colnames = "b se z pvalue ll ul df crit eform".split()

params_table_rownames = [
    "income",
    "perpoverty",
    "perblack",
    "LN_VC100k96",
    "south",
    "degree",
    "_cons",
]

cov = np.array(
    [
        8.932124278e-10,
        1.512127962e-06,
        1.877263788e-07,
        -4.562869239e-06,
        -2.023379829e-06,
        -0.00001228516761,
        -0.00002423071544,
        1.512127962e-06,
        0.00708057955662,
        0.00028427703202,
        -0.00195495117479,
        -0.00596332288528,
        0.2002206183531,
        -0.1867826510868,
        1.877263788e-07,
        0.00028427703202,
        0.00037906590775,
        -0.00453407701816,
        -0.00623061980468,
        -0.04659404972537,
        0.02694184589718,
        -4.562869239e-06,
        -0.00195495117479,
        -0.00453407701816,
        0.13040895071718,
        0.08362596918255,
        0.89260578257483,
        -0.82275604425296,
        -2.023379829e-06,
        -0.00596332288528,
        -0.00623061980468,
        0.08362596918255,
        0.18575111691226,
        1.0698498854982,
        -0.64859219982256,
        -0.00001228516761,
        0.2002206183531,
        -0.04659404972537,
        0.89260578257483,
        1.0698498854982,
        20.383111057306,
        -12.482192460764,
        -0.00002423071544,
        -0.1867826510868,
        0.02694184589718,
        -0.82275604425296,
        -0.64859219982256,
        -12.482192460764,
        11.55973657791,
    ]
).reshape(7, 7)

cov_colnames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

cov_rownames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

infocrit = np.array([17, np.nan, -27.287276183298, 7, 68.574552366597, 74.40704577499])

infocrit_colnames = "N ll0 ll df AIC BIC".split()

infocrit_rownames = ".".split()

predicted = np.array(
    [
        34.815238952637,
        0.06858423352242,
        7.3026847839355,
        0.25687274336815,
        1.2540435791016,
        0.41320022940636,
        3.9734709262848,
        0.16020278632641,
        2.0739872455597,
        0.22170753777027,
        1.1471545696259,
        0.51121062040329,
        1.7763512134552,
        0.2167394310236,
        2.2698366641998,
        0.2456086575985,
        1.6349502801895,
        0.25546172261238,
        2.7504913806915,
        0.4417819082737,
        2.862185716629,
        0.61734634637833,
        3.5617923736572,
        0.51518148183823,
        2.6135795116425,
        0.34006628394127,
        0.775799036026,
        0.292076587677,
        0.93375068902969,
        0.39795544743538,
        0.56681954860687,
        0.31529840826988,
        1.8914022445679,
        0.26116076111794,
    ]
).reshape(17, 2)

predicted_colnames = "predict_mu predict_linpred_std".split()

predicted_rownames = ["r" + str(n) for n in range(1, 18)]


results_poisson_aweight_hc1 = ParamsTableTestBunch(
    params_table=params_table,
    params_table_colnames=params_table_colnames,
    params_table_rownames=params_table_rownames,
    cov=cov,
    cov_colnames=cov_colnames,
    cov_rownames=cov_rownames,
    infocrit=infocrit,
    infocrit_colnames=infocrit_colnames,
    infocrit_rownames=infocrit_rownames,
    predicted=predicted,
    predicted_colnames=predicted_colnames,
    predicted_rownames=predicted_rownames,
    **est,
)

est = dict(
    k_eq_model=0,
    phi=1,
    vf=1,
    df=10,
    df_m=6,
    power=0,
    canonical=1,
    rank=7,
    aic=7.055225702760191,
    rc=0,
    p=5.72458312679e-74,
    chi2=356.6637749656061,
    ll=-52.96941847346162,
    k_autoCns=0,
    converged=1,
    k_dv=1,
    k_eq=1,
    k=7,
    ic=3,
    N=17,
    nbml=0,
    bic=-4.982438296344967,
    dispers_ps=3.006164170990202,
    deviance_ps=30.06164170990202,
    dispers_p=3.006164170990202,
    deviance_p=30.06164170990202,
    dispers_s=2.33496951442172,
    deviance_s=23.34969514421719,
    dispers=2.33496951442172,
    deviance=23.34969514421719,
    cmdline="glm executions income perpoverty perblack LN_VC100k96 south degree [pweight=fweight], family(poisson) vce(robust)",  # noqa:E501
    cmd="glm",
    predict="glim_p",
    marginsnotok="stdp Anscombe Cooksd Deviance Hat Likelihood Pearson Response Score Working ADJusted STAndardized STUdentized MODified",  # noqa:E501
    marginsok="default",
    hac_lag="15",
    vcetype="Robust",
    vce="robust",
    linkt="Log",
    linkf="ln(u)",
    varfunct="Poisson",
    varfuncf="u",
    opt1="ML",
    oim="oim",
    a="1",
    m="1",
    varfunc="glim_v3",
    link="glim_l03",
    wexp="= fweight",
    wtype="pweight",
    chi2type="Wald",
    opt="moptimize",
    title="Generalized linear models",
    user="glim_lf",
    crittype="log pseudolikelihood",
    ml_method="e2",
    singularHmethod="m-marquardt",
    technique="nr",
    which="max",
    depvar="executions",
    properties="b V",
)

params_table = np.array(
    [
        0.00025343868829,
        0.0000298866597,
        8.4799937786829,
        2.252059827e-17,
        0.00019486191167,
        0.00031201546491,
        np.nan,
        1.9599639845401,
        0,
        0.09081422305585,
        0.08414617969117,
        1.0792435662456,
        0.28047916301946,
        -0.07410925857549,
        0.25573770468718,
        np.nan,
        1.9599639845401,
        0,
        -0.09416451429381,
        0.01946961498728,
        -4.8364856909253,
        1.321547815e-06,
        -0.13232425846174,
        -0.05600477012587,
        np.nan,
        1.9599639845401,
        0,
        0.27652273809506,
        0.36112179485191,
        0.76573261995571,
        0.44383541350407,
        -0.43126297384714,
        0.98430845003726,
        np.nan,
        1.9599639845401,
        0,
        2.239890838384,
        0.43098853454849,
        5.1971007551989,
        2.024206636e-07,
        1.3951688329193,
        3.0846128438487,
        np.nan,
        1.9599639845401,
        0,
        -18.842583191417,
        4.5147658917489,
        -4.1735460139479,
        0.00002998950578,
        -27.691361737874,
        -9.9938046449589,
        np.nan,
        1.9599639845401,
        0,
        -6.5630017977416,
        3.3999612612355,
        -1.930316639948,
        0.0535676165153,
        -13.226803418595,
        0.10079982311137,
        np.nan,
        1.9599639845401,
        0,
    ]
).reshape(7, 9)

params_table_colnames = "b se z pvalue ll ul df crit eform".split()

params_table_rownames = [
    "income",
    "perpoverty",
    "perblack",
    "LN_VC100k96",
    "south",
    "degree",
    "_cons",
]

cov = np.array(
    [
        8.932124278e-10,
        1.512127962e-06,
        1.877263788e-07,
        -4.562869239e-06,
        -2.023379829e-06,
        -0.00001228516761,
        -0.00002423071544,
        1.512127962e-06,
        0.00708057955662,
        0.00028427703202,
        -0.0019549511748,
        -0.00596332288528,
        0.20022061835302,
        -0.18678265108673,
        1.877263788e-07,
        0.00028427703202,
        0.00037906590775,
        -0.00453407701816,
        -0.00623061980467,
        -0.04659404972535,
        0.02694184589715,
        -4.562869239e-06,
        -0.0019549511748,
        -0.00453407701816,
        0.13040895071706,
        0.0836259691825,
        0.89260578257395,
        -0.82275604425197,
        -2.023379829e-06,
        -0.00596332288528,
        -0.00623061980467,
        0.0836259691825,
        0.18575111691225,
        1.0698498854979,
        -0.64859219982217,
        -0.00001228516761,
        0.20022061835302,
        -0.04659404972535,
        0.89260578257395,
        1.0698498854979,
        20.383111057299,
        -12.482192460755,
        -0.00002423071544,
        -0.18678265108673,
        0.02694184589715,
        -0.82275604425197,
        -0.64859219982217,
        -12.482192460755,
        11.559736577902,
    ]
).reshape(7, 7)

cov_colnames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

cov_rownames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

infocrit = np.array([17, np.nan, -52.969418473462, 7, 119.93883694692, 125.77133035532])

infocrit_colnames = "N ll0 ll df AIC BIC".split()

infocrit_rownames = ".".split()

predicted = np.array(
    [
        34.815238952637,
        0.06858423352242,
        7.3026847839355,
        0.25687274336815,
        1.2540435791016,
        0.41320022940636,
        3.9734709262848,
        0.16020278632641,
        2.0739872455597,
        0.22170753777027,
        1.1471545696259,
        0.51121062040329,
        1.7763512134552,
        0.2167394310236,
        2.2698366641998,
        0.2456086575985,
        1.6349502801895,
        0.25546172261238,
        2.7504913806915,
        0.4417819082737,
        2.862185716629,
        0.61734634637833,
        3.5617923736572,
        0.51518148183823,
        2.6135795116425,
        0.34006628394127,
        0.775799036026,
        0.292076587677,
        0.93375068902969,
        0.39795544743538,
        0.56681954860687,
        0.31529840826988,
        1.8914022445679,
        0.26116076111794,
    ]
).reshape(17, 2)

predicted_colnames = "predict_mu predict_linpred_std".split()

predicted_rownames = ["r" + str(n) for n in range(1, 18)]


results_poisson_pweight_hc1 = ParamsTableTestBunch(
    params_table=params_table,
    params_table_colnames=params_table_colnames,
    params_table_rownames=params_table_rownames,
    cov=cov,
    cov_colnames=cov_colnames,
    cov_rownames=cov_rownames,
    infocrit=infocrit,
    infocrit_colnames=infocrit_colnames,
    infocrit_rownames=infocrit_rownames,
    predicted=predicted,
    predicted_colnames=predicted_colnames,
    predicted_rownames=predicted_rownames,
    **est,
)

est = dict(
    k_eq_model=0,
    vf=1,
    df=10,
    df_m=6,
    power=0,
    canonical=1,
    rank=7,
    aic=4.579685683305704,
    rc=0,
    p=4.1950730971e-123,
    chi2=584.908728768987,
    ll=-31.92732830809848,
    N_clust=9,
    k_autoCns=0,
    converged=1,
    k_dv=1,
    k_eq=1,
    k=7,
    ic=3,
    N=17,
    nbml=0,
    bic=-9.740492454486454,
    dispers_ps=2.475374834715614,
    deviance_ps=24.75374834715614,
    dispers_p=2.475374834715614,
    deviance_p=24.75374834715614,
    dispers_s=1.859164098607571,
    deviance_s=18.59164098607571,
    dispers=1.859164098607571,
    deviance=18.59164098607571,
    phi=1,
    cmdline="glm executions income perpoverty perblack LN_VC100k96 south degree, family(poisson) vce(cluster id)",  # noqa:E501
    cmd="glm",
    predict="glim_p",
    marginsnotok="stdp Anscombe Cooksd Deviance Hat Likelihood Pearson Response Score Working ADJusted STAndardized STUdentized MODified",  # noqa:E501
    marginsok="default",
    hac_lag="15",
    vcetype="Robust",
    vce="cluster",
    linkt="Log",
    linkf="ln(u)",
    varfunct="Poisson",
    varfuncf="u",
    opt1="ML",
    clustvar="id",
    oim="oim",
    a="1",
    m="1",
    varfunc="glim_v3",
    link="glim_l03",
    chi2type="Wald",
    opt="moptimize",
    title="Generalized linear models",
    user="glim_lf",
    crittype="log pseudolikelihood",
    ml_method="e2",
    singularHmethod="m-marquardt",
    technique="nr",
    which="max",
    depvar="executions",
    properties="b V",
)

params_table = np.array(
    [
        0.00026110166569,
        0.00004098448535,
        6.3707440379489,
        1.881133617e-10,
        0.00018077355048,
        0.0003414297809,
        np.nan,
        1.9599639845401,
        0,
        0.07781804809828,
        0.11602998752167,
        0.67067186475175,
        0.50242959011024,
        -0.14959654857083,
        0.3052326447674,
        np.nan,
        1.9599639845401,
        0,
        -0.09493110013466,
        0.02432927475974,
        -3.9019288931601,
        0.00009542919351,
        -0.14261560243373,
        -0.04724659783559,
        np.nan,
        1.9599639845401,
        0,
        0.29693462055586,
        0.31774950884716,
        0.93449277587615,
        0.35004976070702,
        -0.32584297288986,
        0.91971221400158,
        np.nan,
        1.9599639845401,
        0,
        2.3011832004524,
        0.54874508731474,
        4.1935376801516,
        0.00002746374324,
        1.2256625926223,
        3.3767038082826,
        np.nan,
        1.9599639845401,
        0,
        -18.722067603077,
        2.8106198749749,
        -6.6611880780372,
        2.716227723e-11,
        -24.230781332261,
        -13.213353873894,
        np.nan,
        1.9599639845401,
        0,
        -6.8014789919532,
        3.1571598785659,
        -2.1543029981246,
        0.03121641791743,
        -12.989398647377,
        -0.61355933652912,
        np.nan,
        1.9599639845401,
        0,
    ]
).reshape(7, 9)

params_table_colnames = "b se z pvalue ll ul df crit eform".split()

params_table_rownames = [
    "income",
    "perpoverty",
    "perblack",
    "LN_VC100k96",
    "south",
    "degree",
    "_cons",
]

cov = np.array(
    [
        1.679728039e-09,
        4.034336761e-06,
        1.735749447e-07,
        -5.093610363e-06,
        -4.552211884e-06,
        0.00001563785418,
        -0.00009230028034,
        4.034336761e-06,
        0.01346295800428,
        0.00110922683659,
        -0.01950093608551,
        -0.02957572460439,
        0.08545644123676,
        -0.23518641056668,
        1.735749447e-07,
        0.00110922683659,
        0.00059191361033,
        -0.00720622811203,
        -0.01195031391163,
        -0.04317371228367,
        0.03351736744645,
        -5.093610363e-06,
        -0.01950093608551,
        -0.00720622811203,
        0.10096475037261,
        0.13375578883899,
        0.49763538443989,
        -0.27357574414228,
        -4.552211884e-06,
        -0.02957572460439,
        -0.01195031391163,
        0.13375578883899,
        0.30112117085206,
        0.65342245458316,
        -0.47102547759356,
        0.00001563785418,
        0.08545644123676,
        -0.04317371228367,
        0.49763538443989,
        0.65342245458316,
        7.8995840816039,
        -6.5824964755966,
        -0.00009230028034,
        -0.23518641056668,
        0.03351736744645,
        -0.27357574414228,
        -0.47102547759356,
        -6.5824964755966,
        9.9676584988266,
    ]
).reshape(7, 7)

cov_colnames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

cov_rownames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

infocrit = np.array([17, np.nan, -31.927328308098, 7, 77.854656616197, 83.68715002459])

infocrit_colnames = "N ll0 ll df AIC BIC".split()

infocrit_rownames = ".".split()

predicted = np.array(
    [
        35.226364135742,
        0.05941947177052,
        8.1965742111206,
        0.09018591046333,
        1.3118965625763,
        0.53127920627594,
        3.6862981319427,
        0.23996050655842,
        2.0823004245758,
        0.33554902672768,
        1.0650315284729,
        0.53513532876968,
        1.9260421991348,
        0.32360115647316,
        2.4171404838562,
        0.33078169822693,
        1.8473218679428,
        0.32581362128258,
        2.8643238544464,
        0.46489810943604,
        3.1211984157562,
        0.71297109127045,
        3.338207244873,
        0.58515930175781,
        2.5269968509674,
        0.42410242557526,
        0.89725440740585,
        0.40493285655975,
        0.97933322191238,
        0.5560839176178,
        0.53462094068527,
        0.419488966465,
        1.9790935516357,
        0.3438538312912,
    ]
).reshape(17, 2)

predicted_colnames = "predict_mu predict_linpred_std".split()

predicted_rownames = ["r" + str(n) for n in range(1, 18)]


results_poisson_none_clu1 = ParamsTableTestBunch(
    params_table=params_table,
    params_table_colnames=params_table_colnames,
    params_table_rownames=params_table_rownames,
    cov=cov,
    cov_colnames=cov_colnames,
    cov_rownames=cov_rownames,
    infocrit=infocrit,
    infocrit_colnames=infocrit_colnames,
    infocrit_rownames=infocrit_rownames,
    predicted=predicted,
    predicted_colnames=predicted_colnames,
    predicted_rownames=predicted_rownames,
    **est,
)

est = dict(
    k_eq_model=0,
    vf=1,
    df=26,
    df_m=6,
    power=0,
    canonical=1,
    rank=7,
    aic=3.634510210512826,
    rc=0,
    p=6.87057569032e-91,
    chi2=435.380362705941,
    ll=-52.96941847346162,
    N_clust=9,
    k_autoCns=0,
    converged=1,
    k_dv=1,
    k_eq=1,
    k=7,
    ic=3,
    N=33,
    nbml=0,
    bic=-67.5595014539113,
    dispers_ps=1.156216988842385,
    deviance_ps=30.06164170990202,
    dispers_p=1.156216988842385,
    deviance_p=30.06164170990202,
    dispers_s=0.8980651978545075,
    deviance_s=23.34969514421719,
    dispers=0.8980651978545075,
    deviance=23.34969514421719,
    phi=1,
    cmdline="glm executions income perpoverty perblack LN_VC100k96 south degree [fweight=fweight], family(poisson) vce(cluster id)",  # noqa:E501
    cmd="glm",
    predict="glim_p",
    marginsnotok="stdp Anscombe Cooksd Deviance Hat Likelihood Pearson Response Score Working ADJusted STAndardized STUdentized MODified",  # noqa:E501
    marginsok="default",
    hac_lag="15",
    vcetype="Robust",
    vce="cluster",
    linkt="Log",
    linkf="ln(u)",
    varfunct="Poisson",
    varfuncf="u",
    opt1="ML",
    clustvar="id",
    oim="oim",
    a="1",
    m="1",
    varfunc="glim_v3",
    link="glim_l03",
    wexp="= fweight",
    wtype="fweight",
    chi2type="Wald",
    opt="moptimize",
    title="Generalized linear models",
    user="glim_lf",
    crittype="log pseudolikelihood",
    ml_method="e2",
    singularHmethod="m-marquardt",
    technique="nr",
    which="max",
    depvar="executions",
    properties="b V",
)

params_table = np.array(
    [
        0.00025343868829,
        0.0000293670276,
        8.6300422274613,
        6.132932700e-18,
        0.00019588037186,
        0.00031099700472,
        np.nan,
        1.9599639845401,
        0,
        0.09081422305585,
        0.09800194027664,
        0.92665739881773,
        0.35410444288802,
        -0.10126605030142,
        0.28289449641311,
        np.nan,
        1.9599639845401,
        0,
        -0.09416451429381,
        0.02511206083893,
        -3.7497724658197,
        0.00017699509401,
        -0.14338324911569,
        -0.04494577947193,
        np.nan,
        1.9599639845401,
        0,
        0.27652273809506,
        0.36749499886987,
        0.75245306451906,
        0.45177864537662,
        -0.44375422418847,
        0.99679970037859,
        np.nan,
        1.9599639845401,
        0,
        2.239890838384,
        0.51564197481271,
        4.343887712395,
        0.00001399830855,
        1.229251138834,
        3.250530537934,
        np.nan,
        1.9599639845401,
        0,
        -18.842583191417,
        3.2292740757113,
        -5.8349284543976,
        5.381365332e-09,
        -25.17184407602,
        -12.513322306813,
        np.nan,
        1.9599639845401,
        0,
        -6.5630017977416,
        3.1938260811459,
        -2.0549026875586,
        0.03988840483712,
        -12.822785889672,
        -0.30321770581092,
        np.nan,
        1.9599639845401,
        0,
    ]
).reshape(7, 9)

params_table_colnames = "b se z pvalue ll ul df crit eform".split()

params_table_rownames = [
    "income",
    "perpoverty",
    "perblack",
    "LN_VC100k96",
    "south",
    "degree",
    "_cons",
]

cov = np.array(
    [
        8.624223101e-10,
        2.413510691e-06,
        3.123995891e-07,
        -4.358439015e-06,
        -8.084672085e-06,
        -4.785328653e-06,
        -0.00003652286809,
        2.413510691e-06,
        0.00960438029799,
        0.00106422375754,
        -0.00911884619892,
        -0.03121758372723,
        0.06803953530989,
        -0.17715756048416,
        3.123995891e-07,
        0.00106422375754,
        0.00063061559958,
        -0.00844230553011,
        -0.01177586448603,
        -0.05361546061036,
        0.03844868195577,
        -4.358439015e-06,
        -0.00911884619892,
        -0.00844230553011,
        0.13505257419436,
        0.14058853110927,
        0.86184257188631,
        -0.74146699290106,
        -8.084672085e-06,
        -0.03121758372723,
        -0.01177586448603,
        0.14058853110927,
        0.26588664618875,
        0.75712244813913,
        -0.35118919402718,
        -4.785328653e-06,
        0.06803953530989,
        -0.05361546061036,
        0.86184257188631,
        0.75712244813913,
        10.428211056061,
        -8.3518020608948,
        -0.00003652286809,
        -0.17715756048416,
        0.03844868195577,
        -0.74146699290106,
        -0.35118919402718,
        -8.3518020608948,
        10.200525036608,
    ]
).reshape(7, 7)

cov_colnames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

cov_rownames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

infocrit = np.array([33, np.nan, -52.969418473462, 7, 119.93883694692, 130.41438987719])

infocrit_colnames = "N ll0 ll df AIC BIC".split()

infocrit_rownames = ".".split()

predicted = np.array(
    [
        34.815238952637,
        0.07249507308006,
        7.3026847839355,
        0.17909966409206,
        1.2540435791016,
        0.36725598573685,
        3.9734709262848,
        0.1719862818718,
        2.0739872455597,
        0.27532628178596,
        1.1471545696259,
        0.51580721139908,
        1.7763512134552,
        0.23559851944447,
        2.2698366641998,
        0.21655206382275,
        1.6349502801895,
        0.27835717797279,
        2.7504913806915,
        0.44458091259003,
        2.862185716629,
        0.54439353942871,
        3.5617923736572,
        0.57089400291443,
        2.6135795116425,
        0.41426089406013,
        0.775799036026,
        0.35101860761642,
        0.93375068902969,
        0.39217269420624,
        0.56681954860687,
        0.27232182025909,
        1.8914022445679,
        0.24083258211613,
    ]
).reshape(17, 2)

predicted_colnames = "predict_mu predict_linpred_std".split()

predicted_rownames = ["r" + str(n) for n in range(1, 18)]


results_poisson_fweight_clu1 = ParamsTableTestBunch(
    params_table=params_table,
    params_table_colnames=params_table_colnames,
    params_table_rownames=params_table_rownames,
    cov=cov,
    cov_colnames=cov_colnames,
    cov_rownames=cov_rownames,
    infocrit=infocrit,
    infocrit_colnames=infocrit_colnames,
    infocrit_rownames=infocrit_rownames,
    predicted=predicted,
    predicted_colnames=predicted_colnames,
    predicted_rownames=predicted_rownames,
    **est,
)

est = dict(
    k_eq_model=0,
    vf=1,
    df=10,
    df_m=6,
    power=0,
    canonical=1,
    rank=7,
    aic=4.033797198035106,
    rc=0,
    p=6.87057569091e-91,
    chi2=435.3803627057688,
    ll=-27.28727618329841,
    N_clust=9,
    k_autoCns=0,
    converged=1,
    k_dv=1,
    k_eq=1,
    k=7,
    ic=3,
    N=17,
    nbml=0,
    bic=-16.30350260869269,
    dispers_ps=1.548630027479802,
    deviance_ps=15.48630027479802,
    dispers_p=1.548630027479802,
    deviance_p=15.48630027479802,
    dispers_s=1.202863083186947,
    deviance_s=12.02863083186947,
    dispers=1.202863083186947,
    deviance=12.02863083186947,
    phi=1,
    cmdline="glm executions income perpoverty perblack LN_VC100k96 south degree [aweight=fweight], family(poisson) vce(cluster id)",  # noqa:E501
    cmd="glm",
    predict="glim_p",
    marginsnotok="stdp Anscombe Cooksd Deviance Hat Likelihood Pearson Response Score Working ADJusted STAndardized STUdentized MODified",  # noqa:E501
    marginsok="default",
    hac_lag="15",
    vcetype="Robust",
    vce="cluster",
    linkt="Log",
    linkf="ln(u)",
    varfunct="Poisson",
    varfuncf="u",
    opt1="ML",
    clustvar="id",
    oim="oim",
    a="1",
    m="1",
    varfunc="glim_v3",
    link="glim_l03",
    wexp="= fweight",
    wtype="aweight",
    chi2type="Wald",
    opt="moptimize",
    title="Generalized linear models",
    user="glim_lf",
    crittype="log pseudolikelihood",
    ml_method="e2",
    singularHmethod="m-marquardt",
    technique="nr",
    which="max",
    depvar="executions",
    properties="b V",
)

params_table = np.array(
    [
        0.00025343868829,
        0.0000293670276,
        8.6300422274633,
        6.132932700e-18,
        0.00019588037186,
        0.00031099700472,
        np.nan,
        1.9599639845401,
        0,
        0.09081422305585,
        0.09800194027665,
        0.92665739881771,
        0.35410444288803,
        -0.10126605030143,
        0.28289449641312,
        np.nan,
        1.9599639845401,
        0,
        -0.09416451429381,
        0.02511206083893,
        -3.7497724658192,
        0.00017699509401,
        -0.14338324911569,
        -0.04494577947192,
        np.nan,
        1.9599639845401,
        0,
        0.27652273809507,
        0.36749499887001,
        0.75245306451881,
        0.45177864537677,
        -0.44375422418873,
        0.99679970037887,
        np.nan,
        1.9599639845401,
        0,
        2.239890838384,
        0.51564197481271,
        4.343887712395,
        0.00001399830855,
        1.229251138834,
        3.250530537934,
        np.nan,
        1.9599639845401,
        0,
        -18.842583191417,
        3.2292740757119,
        -5.8349284543965,
        5.381365332e-09,
        -25.171844076021,
        -12.513322306812,
        np.nan,
        1.9599639845401,
        0,
        -6.5630017977417,
        3.193826081147,
        -2.054902687558,
        0.03988840483718,
        -12.822785889674,
        -0.30321770580895,
        np.nan,
        1.9599639845401,
        0,
    ]
).reshape(7, 9)

params_table_colnames = "b se z pvalue ll ul df crit eform".split()

params_table_rownames = [
    "income",
    "perpoverty",
    "perblack",
    "LN_VC100k96",
    "south",
    "degree",
    "_cons",
]

cov = np.array(
    [
        8.624223101e-10,
        2.413510691e-06,
        3.123995891e-07,
        -4.358439015e-06,
        -8.084672085e-06,
        -4.785328653e-06,
        -0.00003652286809,
        2.413510691e-06,
        0.00960438029799,
        0.00106422375754,
        -0.00911884619892,
        -0.03121758372723,
        0.06803953530995,
        -0.1771575604842,
        3.123995891e-07,
        0.00106422375754,
        0.00063061559958,
        -0.00844230553012,
        -0.01177586448603,
        -0.05361546061038,
        0.03844868195581,
        -4.358439015e-06,
        -0.00911884619892,
        -0.00844230553012,
        0.13505257419447,
        0.1405885311093,
        0.86184257188684,
        -0.74146699290197,
        -8.084672085e-06,
        -0.03121758372723,
        -0.01177586448603,
        0.1405885311093,
        0.26588664618875,
        0.75712244813928,
        -0.35118919402768,
        -4.785328653e-06,
        0.06803953530995,
        -0.05361546061038,
        0.86184257188684,
        0.75712244813928,
        10.428211056065,
        -8.3518020609031,
        -0.00003652286809,
        -0.1771575604842,
        0.03844868195581,
        -0.74146699290197,
        -0.35118919402768,
        -8.3518020609031,
        10.200525036615,
    ]
).reshape(7, 7)

cov_colnames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

cov_rownames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

infocrit = np.array([17, np.nan, -27.287276183298, 7, 68.574552366597, 74.40704577499])

infocrit_colnames = "N ll0 ll df AIC BIC".split()

infocrit_rownames = ".".split()

predicted = np.array(
    [
        34.815238952637,
        0.07249507308006,
        7.3026847839355,
        0.17909966409206,
        1.2540435791016,
        0.36725598573685,
        3.9734709262848,
        0.1719862818718,
        2.0739872455597,
        0.27532628178596,
        1.1471545696259,
        0.51580721139908,
        1.7763512134552,
        0.23559851944447,
        2.2698366641998,
        0.21655206382275,
        1.6349502801895,
        0.27835714817047,
        2.7504913806915,
        0.44458091259003,
        2.862185716629,
        0.54439353942871,
        3.5617923736572,
        0.57089400291443,
        2.6135795116425,
        0.41426089406013,
        0.775799036026,
        0.35101860761642,
        0.93375068902969,
        0.39217269420624,
        0.56681954860687,
        0.27232182025909,
        1.8914022445679,
        0.24083258211613,
    ]
).reshape(17, 2)

predicted_colnames = "predict_mu predict_linpred_std".split()

predicted_rownames = ["r" + str(n) for n in range(1, 18)]


results_poisson_aweight_clu1 = ParamsTableTestBunch(
    params_table=params_table,
    params_table_colnames=params_table_colnames,
    params_table_rownames=params_table_rownames,
    cov=cov,
    cov_colnames=cov_colnames,
    cov_rownames=cov_rownames,
    infocrit=infocrit,
    infocrit_colnames=infocrit_colnames,
    infocrit_rownames=infocrit_rownames,
    predicted=predicted,
    predicted_colnames=predicted_colnames,
    predicted_rownames=predicted_rownames,
    **est,
)

est = dict(
    k_eq_model=0,
    vf=1,
    df=10,
    df_m=6,
    power=0,
    canonical=1,
    rank=7,
    aic=7.055225702760191,
    rc=0,
    p=6.87057569032e-91,
    chi2=435.380362705941,
    ll=-52.96941847346162,
    N_clust=9,
    k_autoCns=0,
    converged=1,
    k_dv=1,
    k_eq=1,
    k=7,
    ic=3,
    N=17,
    nbml=0,
    bic=-4.982438296344967,
    dispers_ps=3.006164170990202,
    deviance_ps=30.06164170990202,
    dispers_p=3.006164170990202,
    deviance_p=30.06164170990202,
    dispers_s=2.33496951442172,
    deviance_s=23.34969514421719,
    dispers=2.33496951442172,
    deviance=23.34969514421719,
    phi=1,
    cmdline="glm executions income perpoverty perblack LN_VC100k96 south degree [pweight=fweight], family(poisson) vce(cluster id)",  # noqa:E501
    cmd="glm",
    predict="glim_p",
    marginsnotok="stdp Anscombe Cooksd Deviance Hat Likelihood Pearson Response Score Working ADJusted STAndardized STUdentized MODified",  # noqa:E501
    marginsok="default",
    hac_lag="15",
    vcetype="Robust",
    vce="cluster",
    linkt="Log",
    linkf="ln(u)",
    varfunct="Poisson",
    varfuncf="u",
    opt1="ML",
    clustvar="id",
    oim="oim",
    a="1",
    m="1",
    varfunc="glim_v3",
    link="glim_l03",
    wexp="= fweight",
    wtype="pweight",
    chi2type="Wald",
    opt="moptimize",
    title="Generalized linear models",
    user="glim_lf",
    crittype="log pseudolikelihood",
    ml_method="e2",
    singularHmethod="m-marquardt",
    technique="nr",
    which="max",
    depvar="executions",
    properties="b V",
)

params_table = np.array(
    [
        0.00025343868829,
        0.0000293670276,
        8.6300422274613,
        6.132932700e-18,
        0.00019588037186,
        0.00031099700472,
        np.nan,
        1.9599639845401,
        0,
        0.09081422305585,
        0.09800194027664,
        0.92665739881773,
        0.35410444288802,
        -0.10126605030142,
        0.28289449641311,
        np.nan,
        1.9599639845401,
        0,
        -0.09416451429381,
        0.02511206083893,
        -3.7497724658197,
        0.00017699509401,
        -0.14338324911569,
        -0.04494577947193,
        np.nan,
        1.9599639845401,
        0,
        0.27652273809506,
        0.36749499886987,
        0.75245306451906,
        0.45177864537662,
        -0.44375422418847,
        0.99679970037859,
        np.nan,
        1.9599639845401,
        0,
        2.239890838384,
        0.51564197481271,
        4.343887712395,
        0.00001399830855,
        1.229251138834,
        3.250530537934,
        np.nan,
        1.9599639845401,
        0,
        -18.842583191417,
        3.2292740757113,
        -5.8349284543976,
        5.381365332e-09,
        -25.17184407602,
        -12.513322306813,
        np.nan,
        1.9599639845401,
        0,
        -6.5630017977416,
        3.1938260811459,
        -2.0549026875586,
        0.03988840483712,
        -12.822785889672,
        -0.30321770581092,
        np.nan,
        1.9599639845401,
        0,
    ]
).reshape(7, 9)

params_table_colnames = "b se z pvalue ll ul df crit eform".split()

params_table_rownames = [
    "income",
    "perpoverty",
    "perblack",
    "LN_VC100k96",
    "south",
    "degree",
    "_cons",
]

cov = np.array(
    [
        8.624223101e-10,
        2.413510691e-06,
        3.123995891e-07,
        -4.358439015e-06,
        -8.084672085e-06,
        -4.785328653e-06,
        -0.00003652286809,
        2.413510691e-06,
        0.00960438029799,
        0.00106422375754,
        -0.00911884619892,
        -0.03121758372723,
        0.06803953530989,
        -0.17715756048416,
        3.123995891e-07,
        0.00106422375754,
        0.00063061559958,
        -0.00844230553011,
        -0.01177586448603,
        -0.05361546061036,
        0.03844868195577,
        -4.358439015e-06,
        -0.00911884619892,
        -0.00844230553011,
        0.13505257419436,
        0.14058853110927,
        0.86184257188631,
        -0.74146699290106,
        -8.084672085e-06,
        -0.03121758372723,
        -0.01177586448603,
        0.14058853110927,
        0.26588664618875,
        0.75712244813913,
        -0.35118919402718,
        -4.785328653e-06,
        0.06803953530989,
        -0.05361546061036,
        0.86184257188631,
        0.75712244813913,
        10.428211056061,
        -8.3518020608948,
        -0.00003652286809,
        -0.17715756048416,
        0.03844868195577,
        -0.74146699290106,
        -0.35118919402718,
        -8.3518020608948,
        10.200525036608,
    ]
).reshape(7, 7)

cov_colnames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

cov_rownames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

infocrit = np.array([17, np.nan, -52.969418473462, 7, 119.93883694692, 125.77133035532])

infocrit_colnames = "N ll0 ll df AIC BIC".split()

infocrit_rownames = ".".split()

predicted = np.array(
    [
        34.815238952637,
        0.07249507308006,
        7.3026847839355,
        0.17909966409206,
        1.2540435791016,
        0.36725598573685,
        3.9734709262848,
        0.1719862818718,
        2.0739872455597,
        0.27532628178596,
        1.1471545696259,
        0.51580721139908,
        1.7763512134552,
        0.23559851944447,
        2.2698366641998,
        0.21655206382275,
        1.6349502801895,
        0.27835717797279,
        2.7504913806915,
        0.44458091259003,
        2.862185716629,
        0.54439353942871,
        3.5617923736572,
        0.57089400291443,
        2.6135795116425,
        0.41426089406013,
        0.775799036026,
        0.35101860761642,
        0.93375068902969,
        0.39217269420624,
        0.56681954860687,
        0.27232182025909,
        1.8914022445679,
        0.24083258211613,
    ]
).reshape(17, 2)

predicted_colnames = "predict_mu predict_linpred_std".split()

predicted_rownames = ["r" + str(n) for n in range(1, 18)]


results_poisson_pweight_clu1 = ParamsTableTestBunch(
    params_table=params_table,
    params_table_colnames=params_table_colnames,
    params_table_rownames=params_table_rownames,
    cov=cov,
    cov_colnames=cov_colnames,
    cov_rownames=cov_rownames,
    infocrit=infocrit,
    infocrit_colnames=infocrit_colnames,
    infocrit_rownames=infocrit_rownames,
    predicted=predicted,
    predicted_colnames=predicted_colnames,
    predicted_rownames=predicted_rownames,
    **est,
)

est = dict(
    rank=7,
    ll_0=-55.23556912834824,
    ll=-47.54122045581504,
    r2_a=0.3528737432046668,
    rss=267.3132086911238,
    mss=393.6105745962962,
    rmse=5.17023412130557,
    r2=0.5955460895029168,
    F=0.7279778160729128,
    df_r=10,
    df_m=6,
    N=17,
    cmdline="regress executions income perpoverty perblack LN_VC100k96 south degree [aweight=fweight], vce(robust)",  # noqa:E501
    title="Linear regression",
    marginsok="XB default",
    vce="robust",
    depvar="executions",
    cmd="regress",
    properties="b V",
    predict="regres_p",
    model="ols",
    estat_cmd="regress_estat",
    wexp="= fweight",
    wtype="aweight",
    vcetype="Robust",
)

params_table = np.array(
    [
        0.00177624355887,
        0.00100571734546,
        1.7661458926668,
        0.10782432028789,
        -0.00046463433267,
        0.0040171214504,
        10,
        2.2281388519863,
        0,
        0.70240571372092,
        0.54986275700055,
        1.2774200557835,
        0.23031379083217,
        -0.5227648584123,
        1.9275762858541,
        10,
        2.2281388519863,
        0,
        -0.76566360596606,
        0.46482124106144,
        -1.6472216377583,
        0.13053265392051,
        -1.8013498724035,
        0.27002266047141,
        10,
        2.2281388519863,
        0,
        5.7915855647065,
        5.8518623033717,
        0.98969956305525,
        0.34566324660643,
        -7.2471761899099,
        18.830347319323,
        10,
        2.2281388519863,
        0,
        13.018291494864,
        7.3741002410906,
        1.7654074489417,
        0.10795348742173,
        -3.412227750751,
        29.44881074048,
        10,
        2.2281388519863,
        0,
        -140.99921608421,
        84.973820309491,
        -1.6593253730463,
        0.12803894207791,
        -330.33268651749,
        48.334254349065,
        10,
        2.2281388519863,
        0,
        -68.484290889814,
        50.764306481463,
        -1.3490638528633,
        0.20706938025917,
        -181.5942144553,
        44.625632675673,
        10,
        2.2281388519863,
        0,
    ]
).reshape(7, 9)

params_table_colnames = "b se t pvalue ll ul df crit eform".split()

params_table_rownames = [
    "income",
    "perpoverty",
    "perblack",
    "LN_VC100k96",
    "south",
    "degree",
    "_cons",
]

cov = np.array(
    [
        1.011467379e-06,
        0.00038778854684,
        -0.00038909911416,
        0.00356508765632,
        0.0056952104088,
        -0.07926157334067,
        -0.04218673068644,
        0.00038778854684,
        0.30234905153625,
        -0.10112236243026,
        0.59175926747871,
        1.4744074711876,
        -25.6203584288,
        -14.793319880623,
        -0.00038909911416,
        -0.10112236243026,
        0.21605878614189,
        -2.3405630815795,
        -3.2257627901142,
        31.66920792546,
        20.934058595259,
        0.00356508765632,
        0.59175926747871,
        -2.3405630815795,
        34.244292417623,
        34.810403897967,
        -270.34292245471,
        -270.19382562804,
        0.0056952104088,
        1.4744074711876,
        -3.2257627901142,
        34.810403897967,
        54.377354365652,
        -414.2817137548,
        -324.24739845086,
        -0.07926157334067,
        -25.6203584288,
        31.66920792546,
        -270.34292245471,
        -414.2817137548,
        7220.5501379896,
        2907.4556071681,
        -0.04218673068644,
        -14.793319880623,
        20.934058595259,
        -270.19382562804,
        -324.24739845086,
        2907.4556071681,
        2577.0148125439,
    ]
).reshape(7, 7)

cov_colnames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

cov_rownames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

infocrit = np.array([17, -55.235569128348, -47.541220455815, 7, 109.08244091163, 114.91493432002])

infocrit_colnames = "N ll0 ll df AIC BIC".split()

infocrit_rownames = ".".split()

predicted = np.array(
    [
        23.018356323242,
        11.030969619751,
        7.6487560272217,
        3.2376720905304,
        1.3298480510712,
        2.4579885005951,
        6.7120413780212,
        2.8951823711395,
        0.90416890382767,
        2.1985862255096,
        1.9608836174011,
        2.5452246665955,
        4.6054129600525,
        2.8738057613373,
        2.9902882575989,
        1.8505314588547,
        1.4887162446976,
        1.47836124897,
        5.9044842720032,
        4.8891386985779,
        7.0818486213684,
        4.6786789894104,
        7.5460968017578,
        5.5129766464233,
        4.1125593185425,
        2.3989260196686,
        -2.7979807853699,
        3.8943622112274,
        -1.4647831916809,
        2.8729522228241,
        -3.5234127044678,
        3.7701880931854,
        3.9779393672943,
        1.9573417901993,
    ]
).reshape(17, 2)

predicted_colnames = "predict_mu predict_std".split()

predicted_rownames = ["r" + str(n) for n in range(1, 18)]


results_wls_aweight_robust = ParamsTableTestBunch(
    params_table=params_table,
    params_table_colnames=params_table_colnames,
    params_table_rownames=params_table_rownames,
    cov=cov,
    cov_colnames=cov_colnames,
    cov_rownames=cov_rownames,
    infocrit=infocrit,
    infocrit_colnames=infocrit_colnames,
    infocrit_rownames=infocrit_rownames,
    predicted=predicted,
    predicted_colnames=predicted_colnames,
    predicted_rownames=predicted_rownames,
    **est,
)

est = dict(
    rank=7,
    ll_0=-55.23556912834824,
    ll=-47.54122045581504,
    r2_a=0.3528737432046668,
    rss=267.3132086911238,
    mss=393.6105745962962,
    rmse=5.17023412130557,
    r2=0.5955460895029168,
    F=1.412187242235973,
    df_r=8,
    df_m=6,
    N=17,
    N_clust=9,
    cmdline="regress executions income perpoverty perblack LN_VC100k96 south degree [aweight=fweight], vce(cluster id)",  # noqa:E501
    title="Linear regression",
    marginsok="XB default",
    vce="cluster",
    depvar="executions",
    cmd="regress",
    properties="b V",
    predict="regres_p",
    model="ols",
    estat_cmd="regress_estat",
    wexp="= fweight",
    wtype="aweight",
    vcetype="Robust",
    clustvar="id",
)

params_table = np.array(
    [
        0.00177624355887,
        0.00103574504038,
        1.7149428571794,
        0.12469817836724,
        -0.00061218878728,
        0.00416467590501,
        8,
        2.3060041352042,
        0,
        0.70240571372092,
        0.64463869959516,
        1.0896114585768,
        0.30761438040884,
        -0.78413379325815,
        2.1889452207,
        8,
        2.3060041352042,
        0,
        -0.76566360596606,
        0.50850811868177,
        -1.5057057652313,
        0.17056206446331,
        -1.9382854304311,
        0.40695821849901,
        8,
        2.3060041352042,
        0,
        5.7915855647065,
        6.2948340440059,
        0.92005373362009,
        0.3844480847801,
        -8.7243277711951,
        20.307498900608,
        8,
        2.3060041352042,
        0,
        13.018291494864,
        7.9526248350517,
        1.6369804642972,
        0.14027059672576,
        -5.3204942604922,
        31.357077250221,
        8,
        2.3060041352042,
        0,
        -140.99921608421,
        84.897180497105,
        -1.6608233071889,
        0.13532738016362,
        -336.77246537771,
        54.774033209288,
        8,
        2.3060041352042,
        0,
        -68.484290889814,
        50.203382265366,
        -1.3641369923608,
        0.2096627597382,
        -184.25349799498,
        47.284916215355,
        8,
        2.3060041352042,
        0,
    ]
).reshape(7, 9)

params_table_colnames = "b se t pvalue ll ul df crit eform".split()

params_table_rownames = [
    "income",
    "perpoverty",
    "perblack",
    "LN_VC100k96",
    "south",
    "degree",
    "_cons",
]

cov = np.array(
    [
        1.072767789e-06,
        0.00042569049255,
        -0.00044272344175,
        0.00386796354086,
        0.00653558563917,
        -0.08376884119522,
        -0.04513384476642,
        0.00042569049255,
        0.41555905301573,
        -0.07730648264729,
        -0.34087330734824,
        0.82631440946934,
        -31.768811666606,
        -10.324414524804,
        -0.00044272344175,
        -0.07730648264729,
        0.25858050676528,
        -2.8727606144729,
        -3.9481543148554,
        35.836754991381,
        24.653552354067,
        0.00386796354086,
        -0.34087330734824,
        -2.8727606144729,
        39.624935641576,
        42.351437415382,
        -335.98208369348,
        -283.16728769825,
        0.00653558563917,
        0.82631440946934,
        -3.9481543148554,
        42.351437415382,
        63.24424176708,
        -502.21726015398,
        -366.49477518415,
        -0.08376884119522,
        -31.768811666606,
        35.836754991381,
        -335.98208369348,
        -502.21726015398,
        7207.531256358,
        3532.1379707168,
        -0.04513384476642,
        -10.324414524804,
        24.653552354067,
        -283.16728769825,
        -366.49477518415,
        3532.1379707168,
        2520.3795908825,
    ]
).reshape(7, 7)

cov_colnames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

cov_rownames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

infocrit = np.array([17, -55.235569128348, -47.541220455815, 7, 109.08244091163, 114.91493432002])

infocrit_colnames = "N ll0 ll df AIC BIC".split()

infocrit_rownames = ".".split()

predicted = np.array(
    [
        23.018356323242,
        11.727355003357,
        7.6487560272217,
        3.4638004302979,
        1.3298480510712,
        2.1195623874664,
        6.7120413780212,
        2.8227334022522,
        0.90416890382767,
        2.2036759853363,
        1.9608836174011,
        2.0707910060883,
        4.6054129600525,
        2.9022018909454,
        2.9902882575989,
        1.6939970254898,
        1.4887162446976,
        1.8477793931961,
        5.9044842720032,
        4.8752007484436,
        7.0818486213684,
        4.4365234375,
        7.5460968017578,
        5.6850047111511,
        4.1125593185425,
        2.7407164573669,
        -2.7979807853699,
        3.9614858627319,
        -1.4647831916809,
        2.4376966953278,
        -3.5234127044678,
        3.5529434680939,
        3.9779393672943,
        1.7075037956238,
    ]
).reshape(17, 2)

predicted_colnames = "predict_mu predict_std".split()

predicted_rownames = ["r" + str(n) for n in range(1, 18)]


results_wls_aweight_clu1 = ParamsTableTestBunch(
    params_table=params_table,
    params_table_colnames=params_table_colnames,
    params_table_rownames=params_table_rownames,
    cov=cov,
    cov_colnames=cov_colnames,
    cov_rownames=cov_rownames,
    infocrit=infocrit,
    infocrit_colnames=infocrit_colnames,
    infocrit_rownames=infocrit_rownames,
    predicted=predicted,
    predicted_colnames=predicted_colnames,
    predicted_rownames=predicted_rownames,
    **est,
)

est = dict(
    rank=7,
    ll_0=-107.2219871314995,
    ll=-92.28589853187629,
    r2_a=0.5022105716958969,
    rss=518.9021109886529,
    mss=764.067585981045,
    rmse=4.467412394167744,
    r2=0.5955460895029162,
    F=1.835843414931295,
    df_r=8,
    df_m=6,
    N=33,
    N_clust=9,
    cmdline="regress executions income perpoverty perblack LN_VC100k96 south degree [fweight=fweight], vce(cluster id)",  # noqa:E501
    title="Linear regression",
    marginsok="XB default",
    vce="cluster",
    depvar="executions",
    cmd="regress",
    properties="b V",
    predict="regres_p",
    model="ols",
    estat_cmd="regress_estat",
    wexp="= fweight",
    wtype="fweight",
    vcetype="Robust",
    clustvar="id",
)

params_table = np.array(
    [
        0.00177624355887,
        0.00090840849363,
        1.9553357012053,
        0.08627786102497,
        -0.00031855018389,
        0.00387103730162,
        8,
        2.3060041352042,
        0,
        0.70240571372091,
        0.56538554103558,
        1.2423482079757,
        0.24928937729829,
        -0.60137568189177,
        2.0061871093336,
        8,
        2.3060041352042,
        0,
        -0.76566360596606,
        0.44599112337258,
        -1.7167687109468,
        0.12435346910262,
        -1.7941209807276,
        0.26279376879547,
        8,
        2.3060041352042,
        0,
        5.7915855647065,
        5.5209346785031,
        1.0490226568442,
        0.32482245151877,
        -6.9397126341137,
        18.522883763527,
        8,
        2.3060041352042,
        0,
        13.018291494864,
        6.9749133861223,
        1.866444896759,
        0.09894610636006,
        -3.0658876162246,
        29.102470605953,
        8,
        2.3060041352042,
        0,
        -140.99921608421,
        74.459752971542,
        -1.8936299202886,
        0.09489418422765,
        -312.70371434287,
        30.705282174445,
        8,
        2.3060041352042,
        0,
        -68.484290889814,
        44.031279012175,
        -1.5553554751584,
        0.15847103736706,
        -170.02060237022,
        33.05202059059,
        8,
        2.3060041352042,
        0,
    ]
).reshape(7, 9)

params_table_colnames = "b se t pvalue ll ul df crit eform".split()

params_table_rownames = [
    "income",
    "perpoverty",
    "perblack",
    "LN_VC100k96",
    "south",
    "degree",
    "_cons",
]

cov = np.array(
    [
        8.252059913e-07,
        0.00032745422504,
        -0.00034055649365,
        0.00297535656989,
        0.0050273735686,
        -0.06443757015017,
        -0.03471834212801,
        0.00032745422504,
        0.31966081001209,
        -0.05946652511329,
        -0.26221023642171,
        0.63562646882257,
        -24.437547435849,
        -7.9418573267692,
        -0.00034055649365,
        -0.05946652511329,
        0.19890808212714,
        -2.2098158572872,
        -3.037041780658,
        27.566734608754,
        18.96427104159,
        0.00297535656989,
        -0.26221023642171,
        -2.2098158572872,
        30.480719724298,
        32.578028781062,
        -258.44775668729,
        -217.82099053713,
        0.0050273735686,
        0.63562646882257,
        -3.037041780658,
        32.578028781062,
        48.649416743908,
        -386.32096934921,
        -281.91905783396,
        -0.06443757015017,
        -24.437547435849,
        27.566734608754,
        -258.44775668729,
        -386.32096934921,
        5544.254812583,
        2717.0292082435,
        -0.03471834212801,
        -7.9418573267692,
        18.96427104159,
        -217.82099053713,
        -281.91905783396,
        2717.0292082435,
        1938.753531448,
    ]
).reshape(7, 7)

cov_colnames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

cov_rownames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

infocrit = np.array([33, -107.2219871315, -92.285898531876, 7, 198.57179706375, 209.04734999402])

infocrit_colnames = "N ll0 ll df AIC BIC".split()

infocrit_rownames = ".".split()

predicted = np.array(
    [
        23.018356323242,
        10.285571098328,
        7.6487560272217,
        3.0379540920258,
        1.3298480510712,
        1.8589791059494,
        6.7120413780212,
        2.4757008552551,
        0.90416890382767,
        1.9327516555786,
        1.9608836174011,
        1.8162038326263,
        4.6054129600525,
        2.5453994274139,
        2.9902882575989,
        1.485733628273,
        1.4887162446976,
        1.6206097602844,
        5.9044842720032,
        4.2758340835571,
        7.0818486213684,
        3.8910882472992,
        7.5460968017578,
        4.9860787391663,
        4.1125593185425,
        2.4037673473358,
        -2.7979807853699,
        3.4744529724121,
        -1.4647831916809,
        2.1380014419556,
        -3.5234127044678,
        3.1161375045776,
        3.9779393672943,
        1.4975799322128,
    ]
).reshape(17, 2)

predicted_colnames = "predict_mu predict_std".split()

predicted_rownames = ["r" + str(n) for n in range(1, 18)]


results_wls_fweight_clu1 = ParamsTableTestBunch(
    params_table=params_table,
    params_table_colnames=params_table_colnames,
    params_table_rownames=params_table_rownames,
    cov=cov,
    cov_colnames=cov_colnames,
    cov_rownames=cov_rownames,
    infocrit=infocrit,
    infocrit_colnames=infocrit_colnames,
    infocrit_rownames=infocrit_rownames,
    predicted=predicted,
    predicted_colnames=predicted_colnames,
    predicted_rownames=predicted_rownames,
    **est,
)

est = dict(
    rank=7,
    ll_0=-55.23556912834824,
    ll=-47.54122045581504,
    r2_a=0.3528737432046668,
    rss=267.3132086911238,
    mss=393.6105745962962,
    rmse=5.17023412130557,
    r2=0.5955460895029168,
    F=1.412187242235973,
    df_r=8,
    df_m=6,
    N=17,
    N_clust=9,
    cmdline="regress executions income perpoverty perblack LN_VC100k96 south degree [pweight=fweight], vce(cluster id)",  # noqa:E501
    title="Linear regression",
    marginsok="XB default",
    vce="cluster",
    depvar="executions",
    cmd="regress",
    properties="b V",
    predict="regres_p",
    model="ols",
    estat_cmd="regress_estat",
    wexp="= fweight",
    wtype="pweight",
    vcetype="Robust",
    clustvar="id",
)

params_table = np.array(
    [
        0.00177624355887,
        0.00103574504038,
        1.7149428571794,
        0.12469817836724,
        -0.00061218878728,
        0.00416467590501,
        8,
        2.3060041352042,
        0,
        0.70240571372092,
        0.64463869959516,
        1.0896114585768,
        0.30761438040884,
        -0.78413379325815,
        2.1889452207,
        8,
        2.3060041352042,
        0,
        -0.76566360596606,
        0.50850811868177,
        -1.5057057652313,
        0.17056206446331,
        -1.9382854304311,
        0.40695821849901,
        8,
        2.3060041352042,
        0,
        5.7915855647065,
        6.2948340440059,
        0.92005373362009,
        0.3844480847801,
        -8.7243277711951,
        20.307498900608,
        8,
        2.3060041352042,
        0,
        13.018291494864,
        7.9526248350517,
        1.6369804642972,
        0.14027059672576,
        -5.3204942604922,
        31.357077250221,
        8,
        2.3060041352042,
        0,
        -140.99921608421,
        84.897180497105,
        -1.6608233071889,
        0.13532738016362,
        -336.77246537771,
        54.774033209288,
        8,
        2.3060041352042,
        0,
        -68.484290889814,
        50.203382265366,
        -1.3641369923608,
        0.2096627597382,
        -184.25349799498,
        47.284916215355,
        8,
        2.3060041352042,
        0,
    ]
).reshape(7, 9)

params_table_colnames = "b se t pvalue ll ul df crit eform".split()

params_table_rownames = [
    "income",
    "perpoverty",
    "perblack",
    "LN_VC100k96",
    "south",
    "degree",
    "_cons",
]

cov = np.array(
    [
        1.072767789e-06,
        0.00042569049255,
        -0.00044272344175,
        0.00386796354086,
        0.00653558563917,
        -0.08376884119522,
        -0.04513384476642,
        0.00042569049255,
        0.41555905301573,
        -0.07730648264729,
        -0.34087330734824,
        0.82631440946934,
        -31.768811666606,
        -10.324414524804,
        -0.00044272344175,
        -0.07730648264729,
        0.25858050676528,
        -2.8727606144729,
        -3.9481543148554,
        35.836754991381,
        24.653552354067,
        0.00386796354086,
        -0.34087330734824,
        -2.8727606144729,
        39.624935641576,
        42.351437415382,
        -335.98208369348,
        -283.16728769825,
        0.00653558563917,
        0.82631440946934,
        -3.9481543148554,
        42.351437415382,
        63.24424176708,
        -502.21726015398,
        -366.49477518415,
        -0.08376884119522,
        -31.768811666606,
        35.836754991381,
        -335.98208369348,
        -502.21726015398,
        7207.531256358,
        3532.1379707168,
        -0.04513384476642,
        -10.324414524804,
        24.653552354067,
        -283.16728769825,
        -366.49477518415,
        3532.1379707168,
        2520.3795908825,
    ]
).reshape(7, 7)

cov_colnames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

cov_rownames = ["income", "perpoverty", "perblack", "LN_VC100k96", "south", "degree", "_cons"]

infocrit = np.array([17, -55.235569128348, -47.541220455815, 7, 109.08244091163, 114.91493432002])

infocrit_colnames = "N ll0 ll df AIC BIC".split()

infocrit_rownames = ".".split()

predicted = np.array(
    [
        23.018356323242,
        11.727355003357,
        7.6487560272217,
        3.4638004302979,
        1.3298480510712,
        2.1195623874664,
        6.7120413780212,
        2.8227334022522,
        0.90416890382767,
        2.2036759853363,
        1.9608836174011,
        2.0707910060883,
        4.6054129600525,
        2.9022018909454,
        2.9902882575989,
        1.6939970254898,
        1.4887162446976,
        1.8477793931961,
        5.9044842720032,
        4.8752007484436,
        7.0818486213684,
        4.4365234375,
        7.5460968017578,
        5.6850047111511,
        4.1125593185425,
        2.7407164573669,
        -2.7979807853699,
        3.9614858627319,
        -1.4647831916809,
        2.4376966953278,
        -3.5234127044678,
        3.5529434680939,
        3.9779393672943,
        1.7075037956238,
    ]
).reshape(17, 2)

predicted_colnames = "predict_mu predict_std".split()

predicted_rownames = ["r" + str(n) for n in range(1, 18)]


results_wls_pweight_clu1 = ParamsTableTestBunch(
    params_table=params_table,
    params_table_colnames=params_table_colnames,
    params_table_rownames=params_table_rownames,
    cov=cov,
    cov_colnames=cov_colnames,
    cov_rownames=cov_rownames,
    infocrit=infocrit,
    infocrit_colnames=infocrit_colnames,
    infocrit_rownames=infocrit_rownames,
    predicted=predicted,
    predicted_colnames=predicted_colnames,
    predicted_rownames=predicted_rownames,
    **est,
)
